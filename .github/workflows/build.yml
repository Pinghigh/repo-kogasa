name: BUILD

on:
  push:
  schedule:
    - cron:  '0/1 0 0 1/1 * ? '

jobs:
  buildAUR:
    strategy:
      matrix:
        pkgs: [jdk17-openj9-bin, linuxqq-nt-bwrap, otf-apple-fonts, ttf-harmonyos-sans, vscodium-insiders]

      fail-fast: false
      
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: 检查包是否需要更新
      id: is-needed
      uses: ./check-is-needed
      with:
        package-name: ${{ matrix.pkgs }}

    
    - name: Paru 构建包
      uses: ./build-aur-action
      if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
      with:
        repo-name: ${{ matrix.pkgs }}
        preinstallPkgs: ${{ matrix.preinstall-pkgs }}
        makepkgProfilePath: ./makepkg.conf
    
    - uses: actions/upload-artifact@v3
      if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
      with:
        path: ./*/*.pkg.tar.zst
        name: ${{ matrix.pkgs }}
        if-no-files-found: error
        
    # - uses: ncipollo/release-action@v1
    #   with:
    #     allowUpdates: true
    #     tag: "packages"
    #     artifacts: "./*/*.zst"
    #     token: ${{ secrets.GITHUB_TOKEN }}

  buildNonAUR:
    strategy:
      matrix:
        pkgs: [linux-tikogasa-zen2]

      fail-fast: false
      
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: 检查包是否需要更新
        id: is-needed
        uses: ./check-is-needed
        with:
          package-name: ${{ matrix.pkgs }}

      - name: Build Non-AUR packages
        id: makepkg
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        uses: Pinghigh/pkgbuild-action@latest
        with:
          pkgdir: ${{ matrix.pkgs }}
          
      - uses: actions/upload-artifact@v3
        with:
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        path: ./*/*.pkg.tar.zst
        if-no-files-found: error
      
      # - uses: ncipollo/release-action@v1
      #   with:
      #     allowUpdates: true
      #     tag: "packages"
      #     artifacts: ${{ steps.makepkg.outputs.pkgfile0 }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
      


  uploadToOneDrive:      
    runs-on: ubuntu-latest
    if: always()
    # needs: [buildNonAUR]
    needs: [buildAUR, buildNonAUR]

    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/download-artifact@v3
        id: download
      - uses: ./create-db-and-upload-action
        with:
          RCLONE_ONEDRIVE_CLIENT_ID: ${{ secrets.RCLONE_ONEDRIVE_CLIENT_ID }}
          RCLONE_ONEDRIVE_CLIENT_SECRET: ${{ secrets.RCLONE_ONEDRIVE_CLIENT_SECRET }}
          RCLONE_ONEDRIVE_REGION: global
          RCLONE_ONEDRIVE_TOKEN: ${{ secrets.RCLONE_ONEDRIVE_TOKEN }}
          RCLONE_ONEDRIVE_DRIVE_ID: ${{ secrets.RCLONE_ONEDRIVE_DRIVE_ID }}
          RCLONE_ONEDRIVE_DRIVE_TYPE: business
          dest_path: /repo-kogasa
          repo_name: repo-kogasa
          gpg-privatekey: ${{ secrets.GPG_PRIVATE_KEY }}
          local_path: ./
      
      
