pkgsuffix=tikogasa-zen2
pkgbase=linux-$pkgsuffix
_major=6.6
_minor=4
#_minorc=$((_minor+1))
#_rcver=rc8
pkgver=${_major}.${_minor}
_stable=${_major}.${_minor}
#_stable=${_major}
#_stablerc=${_major}-${_rcver}
_srcname=linux-${_stable}
#_srcname=linux-${_major}
pkgdesc='Linux BORE-EEVDF scheduler Kernel with compile-improvements and patches from some disrobutions for amd zen2 cpu'
pkgrel=1
_kernver=$pkgver-$pkgrel
arch=('x86_64')
url="https://github.com/CachyOS/linux-cachyos"
license=('GPL2')
options=('!strip')
makedepends=(bc libelf pahole cpio perl libc++ openmp tar zstd xz gcc initramfs kmod git llvm llvm-libs clang lld polly make patch python kmod)
BUILD_FLAGS=" LLVM=1 LLVM_IAS=1 "
_patchsource="https://raw.githubusercontent.com/cachyos/kernel-patches/master/${_major}"
_ck_patchsource="https://raw.githubusercontent.com/graysky2/linux-patches/master/linux-6.6.3%2B/ck-hrtimer"
source=(
        #"clang"
        #"ld.lld"
        #"https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/${_srcname}.tar.xz"
         "https://mirrors.bfsu.edu.cn/kernel/v${pkgver%%.*}.x/${_srcname}.tar.xz"
        "config"
        "0001-opt-add-some-compilation-flags.patch"
        "https://raw.githubusercontent.com/zhmars/cjktty-patches/master/v6.x/cjktty-${_major}.patch"
        "${_patchsource}/all/0001-cachyos-base-all.patch"
        "${_patchsource}/sched/0001-bore-cachy.patch"
        "${_patchsource}/misc/0001-lrng.patch"
        "git+https://github.com/openzfs/zfs.git#branch=zfs-2.2-release"

        # -ck patches
        ${_ck_patchsource}/0001-hrtimer-Create-highres-timeout-variants-of-schedule_.patch
        ${_ck_patchsource}/0002-time-Special-case-calls-of-schedule_timeout-1-to-use.patch
        ${_ck_patchsource}/0003-time-Special-case-calls-of-schedule_timeout-1-to-use.patch
        ${_ck_patchsource}/0004-hrtimer-Replace-all-schedule-timeout-1-with-schedule.patch
        ${_ck_patchsource}/0005-hrtimer-Replace-all-calls-to-schedule_timeout_interr.patch
        ${_ck_patchsource}/0006-hrtimer-Replace-all-calls-to-schedule_timeout_uninte.patch
        ${_ck_patchsource}/0007-time-Don-t-use-hrtimer-overlay-when-pm_freezing-sinc.patch
        ${_ck_patchsource}/0008-clockevents-hrtimer-Make-hrtimer-granularity-and-min.patch
)

export KBUILD_BUILD_HOST=kogasa
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
        # clang ${srcdir}/test.c -O3 -march=znver2 -mtune=znver2 -Xclang -load -Xclang LLVMPolly.so -mllvm -polly -mllvm -polly-parallel -fopenmp -mllvm -polly-vectorizer=stripmine -mllvm -polly-omp-backend=LLVM -mllvm -polly-scheduling=dynamic -mllvm -polly-ast-use-context -mllvm -polly-invariant-load-hoisting -mllvm -polly-loopfusion-greedy -mllvm -polly-run-inliner -mllvm -polly-run-dce -fno-math-errno -fno-trapping-math -falign-functions=32 -fno-semantic-interposition -fcf-protection=none -std=gnu18 ${srcdir}/test.out

        cd ${srcdir}/$_srcname

        echo "Setting version..."
        echo "-$pkgrel" >localversion.10-pkgrel
        echo "${pkgbase#linux}" >localversion.20-pkgname

        local src
        for src in "${source[@]}"; do
                src="${src%%::*}"
                src="${src##*/}"
                src="${src%.zst}"
                [[ $src = *.patch ]] || continue
                echo "Applying patch $src..."
                patch -Np1 <"../$src"
        done

        echo "Setting config..."
        cp ../config .config

        ### Select CPU optimization
        MARCH=$(echo $_processor_opt | tr '[:lower:]' '[:upper:]' && echo)
        MARCH2=MZEN2
        scripts/config -k -d CONFIG_GENERIC_CPU
        scripts/config -k -e CONFIG_${MARCH2}

        ### Selecting CachyOS config
        echo "Enabling CachyOS config..."
        scripts/config -e CACHY

        ### Select LLVM level
        echo "Enabling LLVM THIN LTO..."
        scripts/config -e LTO \
                -e LTO_CLANG \
                -e ARCH_SUPPORTS_LTO_CLANG \
                -e ARCH_SUPPORTS_LTO_CLANG_THIN \
                -d LTO_NONE \
                -e HAS_LTO_CLANG \
                -d LTO_CLANG_FULL \
                -e LTO_CLANG_THIN \
                -e HAVE_GCC_PLUGINS

        ### Select tick rate
        echo "Setting tick rate to 2k Hz..."
        scripts/config -d HZ_300 \
                -e HZ_1000 \
                --set-val HZ 1000

        ### Enable BORE scheduler
        echo "Selecting BORE CPU scheduler..."
        scripts/config -e SCHED_BORE

        ### Setting NR_CPUS
        echo "Setting NR_CPUS 32..."
        scripts/config --set-val NR_CPUS 32

        echo "Enabling full ticks..."
        scripts/config -d HZ_PERIODIC \
                -d NO_HZ_IDLE \
                -d CONTEXT_TRACKING_FORCE \
                -e NO_HZ_FULL_NODEF \
                -e NO_HZ_FULL \
                -e NO_HZ \
                -e NO_HZ_COMMON \
                -e CONTEXT_TRACKING

        ### Select preempt type
        echo "Enabling low latency preempt..."
        scripts/config -e PREEMPT_BUILD \
                -d PREEMPT_NONE \
                -d PREEMPT_VOLUNTARY \
                -e PREEMPT \
                -e PREEMPT_COUNT \
                -e PREEMPTION \
                -e PREEMPT_DYNAMIC

        ### Enable O3
        echo "Enabling KBUILD_CFLAGS -O3..."
        scripts/config -d CC_OPTIMIZE_FOR_PERFORMANCE \
                -e CC_OPTIMIZE_FOR_PERFORMANCE_O3

        ### Enable bbr3
        echo "Enabling bbr3"
        echo "Disabling TCP_CONG_CUBIC..."
         echo "Disabling TCP_CONG_CUBIC..."
        scripts/config -m TCP_CONG_CUBIC \
            -d DEFAULT_CUBIC \
            -e TCP_CONG_BBR \
            -e DEFAULT_BBR \
            --set-str DEFAULT_TCP_CONG bbr

        # BBR3 doesn't work properly with FQ_CODEL
        echo "Disabling fq_codel by default..."
        scripts/config -m NET_SCH_FQ_CODEL \
            -e NET_SCH_FQ \
            -d DEFAULT_FQ_CODEL \
            -e DEFAULT_FQ \
            --set-str DEFAULT_NET_SCH fq

        ### Select LRU config
        echo "Enabling multigenerational LRU..."
        scripts/config -e LRU_GEN \
                -e LRU_GEN_ENABLED \
                -d LRU_GEN_STATS

        echo "Enable THP always..."
        scripts/config -d TRANSPARENT_HUGEPAGE_MADVISE \
                -e TRANSPARENT_HUGEPAGE_ALWAYS

        ### Enable LRNG
        echo "Enabling Linux Random Number Generator ..."
        scripts/config -d RANDOM_DEFAULT_IMPL \
                -e LRNG \
                -e LRNG_SHA256 \
                -e LRNG_COMMON_DEV_IF \
                -e LRNG_DRNG_ATOMIC \
                -e LRNG_SYSCTL \
                -e LRNG_RANDOM_IF \
                -e LRNG_AIS2031_NTG1_SEEDING_STRATEGY \
                -m LRNG_KCAPI_IF \
                -m LRNG_HWRAND_IF \
                -e LRNG_DEV_IF \
                -e LRNG_RUNTIME_ES_CONFIG \
                -e LRNG_IRQ_DFLT_TIMER_ES \
                -d LRNG_SCHED_DFLT_TIMER_ES \
                -e LRNG_TIMER_COMMON \
                -d LRNG_COLLECTION_SIZE_256 \
                -d LRNG_COLLECTION_SIZE_512 \
                -e LRNG_COLLECTION_SIZE_1024 \
                -d LRNG_COLLECTION_SIZE_2048 \
                -d LRNG_COLLECTION_SIZE_4096 \
                -d LRNG_COLLECTION_SIZE_8192 \
                --set-val LRNG_COLLECTION_SIZE 1024 \
                -e LRNG_HEALTH_TESTS \
                --set-val LRNG_RCT_CUTOFF 31 \
                --set-val LRNG_APT_CUTOFF 325 \
                -e LRNG_IRQ \
                -e LRNG_CONTINUOUS_COMPRESSION_ENABLED \
                -d LRNG_CONTINUOUS_COMPRESSION_DISABLED \
                -e LRNG_ENABLE_CONTINUOUS_COMPRESSION \
                -e LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION \
                --set-val LRNG_IRQ_ENTROPY_RATE 256 \
                -e LRNG_JENT \
                --set-val LRNG_JENT_ENTROPY_RATE 16 \
                -e LRNG_CPU \
                --set-val LRNG_CPU_FULL_ENT_MULTIPLIER 1 \
                --set-val LRNG_CPU_ENTROPY_RATE 8 \
                -e LRNG_SCHED \
                --set-val LRNG_SCHED_ENTROPY_RATE 4294967295 \
                -e LRNG_DRNG_CHACHA20 \
                -m LRNG_DRBG \
                -m LRNG_DRNG_KCAPI \
                -e LRNG_SWITCH \
                -e LRNG_SWITCH_HASH \
                -m LRNG_HASH_KCAPI \
                -e LRNG_SWITCH_DRNG \
                -m LRNG_SWITCH_DRBG \
                -m LRNG_SWITCH_DRNG_KCAPI \
                -e LRNG_DFLT_DRNG_CHACHA20 \
                -d LRNG_DFLT_DRNG_DRBG \
                -d LRNG_DFLT_DRNG_KCAPI \
                -e LRNG_TESTING_MENU \
                -d LRNG_RAW_HIRES_ENTROPY \
                -d LRNG_RAW_JIFFIES_ENTROPY \
                -d LRNG_RAW_IRQ_ENTROPY \
                -d LRNG_RAW_RETIP_ENTROPY \
                -d LRNG_RAW_REGS_ENTROPY \
                -d LRNG_RAW_ARRAY \
                -d LRNG_IRQ_PERF \
                -d LRNG_RAW_SCHED_HIRES_ENTROPY \
                -d LRNG_RAW_SCHED_PID_ENTROPY \
                -d LRNG_RAW_SCHED_START_TIME_ENTROPY \
                -d LRNG_RAW_SCHED_NVCSW_ENTROPY \
                -d LRNG_SCHED_PERF \
                -d LRNG_ACVT_HASH \
                -d LRNG_RUNTIME_MAX_WO_RESEED_CONFIG \
                -d LRNG_TEST_CPU_ES_COMPRESSION \
                -e LRNG_SELFTEST \
                -d LRNG_SELFTEST_PANIC \
                -d LRNG_RUNTIME_FORCE_SEEDING_DISABLE

        ### Enable zram/zswap ZSTD compression
        echo "Enabling zram/swap ZSTD compression..."
        scripts/config -d ZRAM_DEF_COMP_LZORLE \
                -e ZRAM_DEF_COMP_ZSTD \
                --set-str ZRAM_DEF_COMP zstd \
                -d ZSWAP_COMPRESSOR_DEFAULT_LZ4 \
                -e ZSWAP_COMPRESSOR_DEFAULT_ZSTD \
                --set-str ZSWAP_COMPRESSOR_DEFAULT zstd

        ### Disable DEBUG
        scripts/config -d DEBUG_INFO \
                -d DEBUG_INFO_BTF \
                -d DEBUG_INFO_DWARF4 \
                -d DEBUG_INFO_DWARF5 \
                -d PAHOLE_HAS_SPLIT_BTF \
                -d DEBUG_INFO_BTF_MODULES \
                -d SLUB_DEBUG \
                -d PM_DEBUG \
                -d PM_ADVANCED_DEBUG \
                -d PM_SLEEP_DEBUG \
                -d ACPI_DEBUG \
                -d SCHED_DEBUG \
                -d LATENCYTOP \
                -d DEBUG_PREEMPT

        # disable CONFIG_DEBUG_INFO=y at build time otherwise memory usage blows up
        # and can easily overwhelm a system with 32 GB of memory using a tmpfs build
        # partition ... this was introduced by FS#66260, see:
        # https://git.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/linux&id=663b08666b269eeeeaafbafaee07fd03389ac8d7
        scripts/config -d CONFIG_CGROUP_BPF
        scripts/config -d CONFIG_BPF_LSM
        scripts/config -d CONFIG_BPF_PRELOAD
        scripts/config -d CONFIG_BPF_LIRC_MODE2
        scripts/config -d CONFIG_BPF_KPROBE_OVERRIDE

        # https://bbs.archlinux.org/viewtopic.php?pid=1824594#p1824594
        scripts/config -e CONFIG_PSI_DEFAULT_DISABLED

        # FS#66613
        # https://bugzilla.kernel.org/show_bug.cgi?id=207173#c6
        scripts/config -d CONFIG_KVM_WERROR
        # https://bbs.archlinux.org/viewtopic.php?pid=1863567#p1863567
        scripts/config -d CONFIG_LATENCYTOP

        echo "Enable USER_NS_UNPRIVILEGED"
        scripts/config -e USER_NS

        # echo "Enable WINE FASTSYNC"
        # scripts/config -e WINESYNC

        scripts/config -e CONFIG_MODULES

        #echo $pkgdir/usr/lib/modules/$(<version)

        ### Rewrite configuration
        echo "Rewrite configuration..."
        make ${BUILD_FLAGS[*]} CFLAGS="-Xclang -load -Xclang LLVMPolly.so" CXXFLAGS="-Xclang -load -Xclang LLVMPolly.so -stdlib=libc++" prepare -j3
        make ${BUILD_FLAGS[*]} CFLAGS="-Xclang -load -Xclang LLVMPolly.so" CXXFLAGS="-Xclang -load -Xclang LLVMPolly.so -stdlib=libc++" modules_prepare -j3

        cd ${srcdir}/"zfs"
        ./autogen.sh
        sed -i "s|\$(uname -r)|${pkgver}-${pkgsuffix}|g" configure
        ./configure KERNEL_LLVM=1 CFLAGS="-O3 -march=znver2 -mtune=znver2 -Xclang -load -Xclang LLVMPolly.so -mllvm -polly -mllvm -polly-parallel -mllvm -polly-position=early -fopenmp -mllvm -polly-tiling=true -mllvm -polly-prevect-width=256 -mllvm -polly-vectorizer=stripmine -mllvm -polly-omp-backend=LLVM -mllvm -polly-scheduling=dynamic -mllvm -polly-ast-use-context -mllvm -polly-invariant-load-hoisting -mllvm -polly-loopfusion-greedy -mllvm -polly-run-inliner -mllvm -polly-run-dce -mllvm -polly-enable-delicm=true -mllvm -extra-vectorizer-passes -mllvm -enable-cond-stores-vec -mllvm -slp-vectorize-hor-store -mllvm -enable-loopinterchange -mllvm -enable-loop-distribute -mllvm -enable-unroll-and-jam -mllvm -enable-loop-flatten -mllvm -interleave-small-loop-scalar-reduction -mllvm -unroll-runtime-multi-exit -mllvm -aggressive-ext-opt -fno-math-errno -fno-trapping-math -falign-functions=32 -fno-semantic-interposition -mharden-sls=none -fomit-frame-pointer -mprefer-vector-width=256 -std=gnu18" CC=clang LD=ld.lld --prefix=/usr --sysconfdir=/etc --sbindir=/usr/bin --libdir=/usr/lib \
                --datadir=/usr/share --includedir=/usr/include --with-udevdir=/lib/udev \
                --libexecdir=/usr/lib/zfs --with-config=kernel \
                --enable-linux-builtin \
                --with-linux=${srcdir}/$_srcname
        ./copy-builtin ${srcdir}/${_srcname}

        cd ${srcdir}/${_srcname}
        scripts/config -e CONFIG_ZFS

        yes "" | make ${BUILD_FLAGS[*]} CFLAGS="-Xclang -load -Xclang LLVMPolly.so" CXXFLAGS="-Xclang -load -Xclang LLVMPolly.so -stdlib=libc++" config >/dev/null
        diff -u ../config .config || :

        ### Prepared version
        make -s kernelrelease > version
        echo "Prepared $pkgbase version $(<version)"

        # make ${BUILD_FLAGS[*]} nconfig

        ### Save configuration for later reuse
        echo "Save configuration for later reuse..."
        cat .config >"${startdir}/config-${pkgver}-${pkgrel}${pkgbase#linux}"

}

build() {
        cd ${srcdir}/${_srcname}
        make ${BUILD_FLAGS[*]} all -j4
}

_package() {
        pkgdesc="The $pkgdesc kernel and modules"
        depends=('coreutils' 'kmod' 'initramfs')
        optdepends=('wireless-regdb: to set the correct wireless channels of your country'
                'linux-firmware: firmware images needed for some devices'
                'modprobed-db: Keeps track of EVERY kernel module that has ever been probed - useful for those of us who make localmodconfig'
                'uksmd: Userspace KSM helper daemon')
        provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE KSMBD-MODULE UKSMD-BUILTIN)

        cd ${srcdir}/$_srcname

        local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

        echo "Installing boot image..."
        # systemd expects to find the kernel here to allow hibernation
        # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
        install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

        # Used by mkinitcpio to name the kernel
        echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

        echo "Installing modules..."
        make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
                DEPMOD=/doesnt/exist modules_install # Suppress depmod

        # remove build links
        rm "$modulesdir"/build
}

_package-headers() {
        pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
        depends=('pahole' linux-${pkgsuffix})

        cd ${srcdir}/${_srcname}
        local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

        echo "Installing build files..."
        install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
                localversion.* version vmlinux
        install -Dt "$builddir/kernel" -m644 kernel/Makefile
        install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
        cp -t "$builddir" -a scripts

        # required when STACK_VALIDATION is enabled
        install -Dt "$builddir/tools/objtool" tools/objtool/objtool

        # required when DEBUG_INFO_BTF_MODULES is enabled
        if [ -f tools/bpf/resolve_btfids/resolve_btfids ]; then
                install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids
        fi

        echo "Installing headers..."
        cp -t "$builddir" -a include
        cp -t "$builddir/arch/x86" -a arch/x86/include
        install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

        install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
        install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

        # https://bugs.archlinux.org/task/13146
        install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

        # https://bugs.archlinux.org/task/20402
        install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
        install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
        install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

        # https://bugs.archlinux.org/task/71392
        install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

        echo "Installing KConfig files..."
        find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

        echo "Removing unneeded architectures..."
        local arch
        for arch in "$builddir"/arch/*/; do
                [[ $arch = */x86/ ]] && continue
                echo "Removing $(basename "$arch")"
                rm -r "$arch"
        done

        echo "Removing documentation..."
        rm -r "$builddir/Documentation"

        echo "Removing broken symlinks..."
        find -L "$builddir" -type l -printf 'Removing %P\n' -delete

        echo "Removing loose objects..."
        find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

        echo "Stripping build tools..."
        local file
        while read -rd '' file; do
                case "$(file -Sib "$file")" in
                application/x-sharedlib\;*) # Libraries (.so)
                        strip -v $STRIP_SHARED "$file" ;;
                application/x-archive\;*) # Libraries (.a)
                        strip -v $STRIP_STATIC "$file" ;;
                application/x-executable\;*) # Binaries
                        strip -v $STRIP_BINARIES "$file" ;;
                application/x-pie-executable\;*) # Relocatable binaries
                        strip -v $STRIP_SHARED "$file" ;;
                esac
        done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

        echo "Stripping vmlinux..."
        strip -v $STRIP_STATIC "$builddir/vmlinux"

        echo "Adding symlink..."
        mkdir -p "$pkgdir/usr/src"
        ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")

for _p in "${pkgname[@]}"; do
        eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
        _package${_p#$pkgbase}
}"
done

b2sums=('75f20de7474f45966a32f7a1e5f9beadb2b4e111fe9c0ab769ccaa203e798f1a1b0ee05c3cb14de6bb609e2e9df1e238deeadfc21dbf08c6b407c9530bac11ef'
        '949cc401769097829c554fd9cd7eb241cc97e973308267bcdc8e692edb596b361391504a6d0fe064ad2c03b7db8d80e0537fc13420766243c0d2f35414476fb0'
        '58e1369fd712c2922d7764eb483bc2e8f9ab240ab4dd60c0ac50b3c53d42b3da209a74bd90fb2afe593f19f5bd202a9f1a534913c9bd4ddf7b70b4bc907fb486'
        'e3769b00511c088997ea12c9e86108db8357c2589df625ce03b439853e3ed2631151a2755858edf715e35928d7e95bf9ad4f9f717b01f14014358bc716fab541'
        '0b81c9b2746171663a0570f240acbf40b9719f4f7b7bd4ea0e6a6da8901e24e2baba6e36f3422f319b199056184973bcf29321967c0b17745e65307f52a755e6'
        'f2a1f07bc56f26ae3b361c401cbc41ca9927808e52228428d3ed5f909fa8c5231a8760223b3f1480fe9c6d6167825fd4825a66c2ae2411019b57f6aee2585417'
        '1bd3b124dfc8244fed8031ae81713f80576c9aef3e3f32d92c5ef038dc2d5b8c8debf9ff2b37d378a14fd178449b2143049c1914de91263586461b00826a7412'
        'SKIP'
        'da6774b17cc34e2a9e6563bb8907d4e282d49c5551b854d367195b5e2c959afc544451c73678f2f3414d2ad1c32ef8780cd272ba74ffe62fbf006828609bdf6f'
        '21e770328632ee6d966350df1e75d6fa22a23249f5f8991de76aacf695dfe1ad0bdd6c0914e95abaceba2217d7d412d20e184b16bbc3091d2016ddd2d893507e'
        '6e31ca79f61cf06e0b533f583516eedc87d6b7c4fca256f25406e23fee90ae50ed1d2eecb24bff90ea27a7ea98994907b222d0dfaafdbce03c2ad7ca9115a661'
        '7ba27ebcfd4d63abaee482372075699b0b125832a3daa91b5d6e76f5dab6ada9fbd207723f6c378cd88af389940caff551f19f325f17ae4d16993fb8a04943ac'
        '0966872296958009ff2e287224343326bcda33647e0f33e524d0f0aaa823149bc9a7c416acb27beb13b844a7f2dbe3bd311573992eefda95499c0583a0139117'
        'be08d1d43a51f64cec8b5c7d319f00101f032d1b8f9fe77f149bf401bafc12d5c203b4f0900117ef60c5ed785d9c7134c299b8b99cd638b0a639ead2454cef3b'
        '47a77dd73ac57ee6bf792cdccc97aca11e69d8087b7efae8bd0061df26dd8f42e3f89a7c1b7982070c464f329a81c27e3464049db463f93bde9c7ccc5f0e090e'
        'f93c418615d35bb55a18edf762490fc2c61fef8053ddcea2158ddc01d91f80a00582a3c8a8d8a7b05a74ee7f405d4ea9c4514646634d56850271df959a0de749')
