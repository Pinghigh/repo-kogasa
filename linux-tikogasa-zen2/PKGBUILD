    # Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev> && Piotr Gorski <piotrgorski@cachyos.org>
    # Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
    # Contributor: Tobias Powalowski <tpowa@archlinux.org>
    # Contributor: Thomas Baechler <thomas@archlinux.org>

    ### Selecting CachyOS config
    # ATTENTION - one of two predefined values should be selected!
    # 'yes' - enable CachyOS config
    # 'no' - disable CachyOS config
    _cachy_config=${_cachy_config-'yes'}

    ### Selecting the CPU scheduler
    # ATTENTION - one of seven predefined values should be selected!
    # 'bmq' - select 'BitMap Queue CPU scheduler'
    # 'pds' - select 'Priority and Deadline based Skip list multiple queue CPU scheduler'
    # 'cacule' - select 'CacULE scheduler'
    # 'cacule-rdb' - select 'CacULE-RDB scheduler'
    # 'bore' - select 'Burst-Oriented Response Enhancer'
    # 'cfs' - select 'Completely Fair Scheduler'
    # 'tt' - select 'Task Type Scheduler by Hamad Marri'
    # 'hardened' - select 'BORE Scheduler hardened' ## kernel with hardened config and hardening patches with the bore scheduler
    _cpusched=${_cpusched-'cacule'}

    ### BUILD OPTIONS
    # Set these variables to ANYTHING that is not null to enable them

    ### Tweak kernel options prior to a build via nconfig
    _makenconfig=${_makenconfig-}

    ### Tweak kernel options prior to a build via menuconfig
    _makemenuconfig=${_makemenuconfig-}

    ### Tweak kernel options prior to a build via xconfig
    _makexconfig=${_makexconfig-}

    ### Tweak kernel options prior to a build via gconfig
    _makegconfig=${_makegconfig-}

    # NUMA is optimized for multi-socket motherboards.
    # A single multi-core CPU actually runs slower with NUMA enabled.
    # See, https://bugs.archlinux.org/task/31187
    _NUMAdisable=${_NUMAdisable-}

    # Compile ONLY used modules to VASTLYreduce the number of modules built
    # and the build time.
    #
    # To keep track of which modules are needed for your specific system/hardware,
    # give module_db script a try: https://aur.archlinux.org/packages/modprobed-db
    # This PKGBUILD read the database kept if it exists
    #
    # More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
    _localmodcfg=${_localmodcfg-}

    # Use the current kernel's .config file
    # Enabling this option will use the .config of the RUNNING kernel rather than
    # the ARCH defaults. Useful when the package gets updated and you already went
    # through the trouble of customizing your config options.  NOT recommended when
    # a new kernel is released, but again, convenient for package bumps.
    _use_current=${_use_current-}

    ### Enable KBUILD_CFLAGS -O3
    _cc_harder=${_cc_harder-y}

    ### Set this to your number of threads you have in your machine otherwise it will default to 128
    _nr_cpus=${_nr_cpus-8}

    ### Set performance governor as default
    _per_gov=${_per_gov-y}

    ### Enable TCP_CONG_BBR2
    _tcp_bbr2=${_tcp_bbr2-y}

    ### Running with a 1000HZ, 750Hz, 600 Hz, 500Hz, 300Hz, 250Hz and 100Hz tick rate
    _HZ_ticks=${_HZ_ticks-1000}

    ## Choose between perodic, idle or full
    ### Full tickless can give higher performances in various cases but, depending on hardware, lower consistency.
    _tickrate=${_tickrate-idle}

    ## Choose between full(low-latency), voluntary or server
    _preempt=${_preempt-full}

    ### Disable MQ-Deadline I/O scheduler
    _mq_deadline_disable=${_mq_deadline_disable-y}

    ### Disable Kyber I/O scheduler
    _kyber_disable=${_kyber_disable-y}

    ### Enable multigenerational LRU
    # ATTENTION - one of three predefined values should be selected!
    # 'standard' - enable multigenerational LRU
    # 'stats' - enable multigenerational LRU with stats
    # 'none' - disable multigenerational LRU
    _lru_config=${_lru_config-'standard'}

    ### Enable per-VMA locking
    # ATTENTION - one of three predefined values should be selected!
    # 'standard' - enable per-VMA locking
    # 'stats' - enable per-VMA locking with stats
    # 'none' - disable per-VMA locking
    _vma_config=${_vma_config-'standard'}

    ## Enable DAMON
    _damon=${_damon-}

    ## Enable Linux Random Number Generator
    _lrng_enable=${_lrng_enable-y}

    # CPU compiler optimizations - Defaults to prompt at kernel config if left empty
    # AMD CPUs : "k8" "k8sse3" "k10" "barcelona" "bobcat" "jaguar" "bulldozer" "piledriver" "steamroller" "excavator" "zen" "zen2" "zen3"
    # Intel CPUs : "mpsc"(P4 & older Netburst based Xeon) "atom" "core2" "nehalem" "westmere" "silvermont" "sandybridge" "ivybridge" "haswell" "broadwell" "skylake" "skylakex" "cannonlake" "icelake" "goldmont" "goldmontplus" "cascadelake" "cooperlake" "tigerlake" "sapphirerapids" "rocketlake" "alderlake"
    # Other options :
    # - "native_amd" (use compiler autodetection - Selecting your arch manually in the list above is recommended instead of this option)
    # - "native_intel" (use compiler autodetection and will prompt for P6_NOPS - Selecting your arch manually in the list above is recommended instead of this option)
    # - "generic" (kernel's default - to share the package between machines with different CPU Âµarch as long as they are x86-64)
    #
    # Or use the _use_auto_optimization with _use_auto_optimization=y
    _processor_opt=${_processor_opt-}

    _use_auto_optimization=${_use_auto_optimization-}

    # disable debug to lower the size of the kernel
    _disable_debug=${_disable_debug-}

    ## Enable zram/zswap ZSTD compression
    _zstd_compression=${_zstd_compression-y}

    ### Selecting the ZSTD kernel and modules compression level
    # ATTENTION - one of two predefined values should be selected!
    # 'ultra' - highest compression ratio
    # 'normal' - standard compression ratio
    # WARNING: the ultra settings can sometimes
    # be counterproductive in both size and speed.
    _zstd_level_value=${_zstd_level_value-'normal'}

    # Clang LTO mode, only available with the "llvm" compiler - options are "no", "full" or "thin".
    # "full: uses 1 thread for Linking, slow and uses more memory, theoretically with the highest performance gains."
    # "thin: uses multiple threads, faster and uses less memory, may have a lower runtime performance than Full."
    _use_llvm_lto=${_use_llvm_lto-'thin'}

    # Use suffix -lto only when requested by the user
    # Enabled by default.
    # If you do not want the suffix -lto remove the "y" sign next to the flag.
    # https://github.com/CachyOS/linux-cachyos/issues/36
    _use_lto_suffix=${_use_lto_suffix-}

    # KCFI is a proposed forward-edge control-flow integrity scheme for
    # Clang, which is more suitable for kernel use than the existing CFI
    # scheme used by CONFIG_CFI_CLANG. KCFI doesn't require LTO, doesn't
    # alter function references to point to a jump table, and won't break
    # function address equality.
    # ATTENTION!: you do need a patched llvm for the usage of kcfi,
    # you can find a patched llvm-git in the cachyos-repo's.
    # The packagename is called "llvm-kcfi"
    # ATTENTION!: This is very experimental and could fail and the compilation or have other bugs in the kernel
    _use_kcfi=${_use_kcfi-}

    # Build the zfs module builtin in to the kernel
    _build_zfs=${_build_zfs-}

    # Enable bcachefs
    _bcachefs=${_bcachefs-}

    # Enable RT kernel
    # Only works for CFS Scheduler and BORE Scheduler
    _rtkernel=${_rtkernel-}

    # Enable NEST
    # NEST is a experimental cfs scheduler you can find more about here:
    # https://www.phoronix.com/news/Nest-Linux-Scheduling-Warm-Core
    # https://gitlab.inria.fr/nest-public/nest-artifact/-/tree/main
    # ATTENTION!:NEST is only active if you start applications with
    # taskset -c $THREADS application
    # example: taskset -c 0-23 application
    # ATTENTION!:Just works together with the BORE Scheduler and CFS Scheduler
    _nest=${_nest-}

    # Enable LATENCY NICE
    # Latency nice is a approach to sets latency-nice as a per-task attribute
    # It can improve the latency of applications similar to sched_nice, but focused on the latency
    # You need to set the values per task
    # Ananicy-cpp has a experimental implementation for this
    # It converts sched_nice to latency_nice and set this per task
    # You need to configure ananicy-cpp for this or use existing settings
    # If you want to test it, use the following branch
    # https://gitlab.com/ananicy-cpp/ananicy-cpp/-/tree/feature/latency-nice
    _latency_nice=${_latency_nice-}

    pkgsuffix=tikogasa
    pkgbase=linux-$pkgsuffix-zen2
    _major=6.1
    _minor=8
    #_minorc=$((_minor+1))
    #_rcver=rc8
    pkgver=${_major}.${_minor}
    _stable=${_major}.${_minor}
    #_stable=${_major}
    #_stablerc=${_major}-${_rcver}
    _srcname=linux-${_stable}
    #_srcname=linux-${_major}
    pkgdesc='Linux PDS scheduler Kernel by CachyOS with other patches and improvements, zen2 enabled'
    pkgrel=1
    _kernver=$pkgver-$pkgrel
    arch=('x86_64' 'x86_64_v3')
    url="https://github.com/CachyOS/linux-cachyos"
    license=('GPL2')
    options=('!strip')
    _commit=fdbdf7e0ec56cd59e11d024c473e766429271a5c
    makedepends=(bc libelf pahole cpio perl libc++ openmp tar zstd xz gcc initramfs kmod python git llvm llvm-libs clang lld polly make patch musl)
  
    libc="/usr/lib/musl"
    libc_inc="/usr/lib/musl/include"
    libc_lib="/usr/lib/musl/lib"
    BUILD_FLAGS="LLVM=1 LLVM_IAS=1 CC=clang CXX=clang++ LD=ld.lld"
    _patchsource="https://raw.githubusercontent.com/cachyos/kernel-patches/master/${_major}"
    source=(
        #"clang"
        #"ld.lld"
        "https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/${_srcname}.tar.xz"
        "clearlinux-linux::git+https://github.com/clearlinux-pkgs/linux"
        "linux-patches::git+https://github.com/xanmod/linux-patches"
        "config" 
        "test.c"
        "0001-makefile-clang-polly-ms178.patch"
        #"https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.6/clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04.tar.xz"
        "https://raw.githubusercontent.com/zhmars/cjktty-patches/master/v6.x/cjktty-${_major}.patch"
        "${_patchsource}/all/0001-cachyos-base-all.patch"
        # "${_patchsource}/misc/0001-bcachefs.patch"
        "${_patchsource}/sched/0001-prjc-cachy.patch"
	    ${_patchsource}/misc/0001-lrng.patch
    )
    ## ZFS Support
    if true; then
        source+=("git+https://github.com/cachyos/zfs.git#commit=04b02785b67f9b976c43643dd52ce6cdbc22e11e")
    fi
    export KBUILD_BUILD_HOST=cleararch
    export KBUILD_BUILD_USER=$pkgbase
    export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

    prepare() {
        clang ${srcdir}/test.c -O3 -march=znver2 -mtune=znver2 -Xclang -load -Xclang LLVMPolly.so -mllvm -polly -mllvm -polly-parallel -fopenmp -mllvm -polly-vectorizer=stripmine -mllvm -polly-omp-backend=LLVM -mllvm -polly-num-threads=36 -mllvm -polly-scheduling=dynamic -mllvm -polly-scheduling-chunksize=1 -mllvm -polly-ast-use-context -mllvm -polly-invariant-load-hoisting -mllvm -polly-loopfusion-greedy -mllvm -polly-run-inliner -mllvm -polly-run-dce -fno-math-errno -fno-trapping-math -falign-functions=32 -fno-semantic-interposition -fcf-protection=none -std=gnu18 -o ${srcdir}/test.out
        cp clearlinux-linux/*.patch ./
        cp linux-patches/linux-${_major}.y-xanmod/xanmod/*.patch ./
        cd ${srcdir}/$_srcname

        echo "Setting version..."
        scripts/setlocalversion --save-scmversion
        echo "-$pkgrel" > localversion.10-pkgrel
        echo "${pkgbase#linux}" > localversion.20-pkgname

        local src
        for src in "${source[@]}"; do
            src="${src%%::*}"
            src="${src##*/}"
            [[ $src = *.patch ]] || continue
            echo "Applying patch $src..."
            patch -Np1 < "../$src"
        done

        echo "Setting config..."
        cp ../config .config

        ### Select CPU optimization
        MARCH=$(echo $_processor_opt|tr '[:lower:]' '[:upper:]'&&echo)
        MARCH2=MZEN2
        scripts/config -k -d CONFIG_GENERIC_CPU
        scripts/config -k -e CONFIG_${MARCH2}

        ### Selecting CachyOS config
        echo "Enabling CachyOS config..."
        scripts/config -e CACHY

        ### Select LLVM level
        echo "Enabling LLVM THIN LTO..."
        scripts/config -e LTO \
            -e LTO_CLANG \
            -e ARCH_SUPPORTS_LTO_CLANG \
            -e ARCH_SUPPORTS_LTO_CLANG_THIN \
            -d LTO_NONE \
            -e HAS_LTO_CLANG \
            -d LTO_CLANG_FULL \
            -e LTO_CLANG_THIN \
            -e HAVE_GCC_PLUGINS

        ### Select tick rate
        if true; then
            echo "Setting tick rate to 1k Hz..."
            scripts/config -d HZ_300 \
                -e HZ_1000 \
                --set-val HZ 1000
        elif [ "$_HZ_ticks" = "750" ]; then
            echo "Setting tick rate to 750Hz..."
            scripts/config -d HZ_300 \
                -e HZ_750 \
                --set-val HZ 750
        elif [ "$_HZ_ticks" = "600" ]; then
            echo "Setting tick rate to 600Hz..."
            scripts/config -d HZ_300 \
                -e HZ_600 \
                --set-val HZ 600
        elif [ "$_HZ_ticks" = "500" ]; then
            echo "Setting tick rate to 500Hz..."
            scripts/config -d HZ_300 \
                -e HZ_500 \
                --set-val HZ 500
        elif [ "$_HZ_ticks" = "300" ]; then
            echo "Setting tick rate to 300Hz..."
            scripts/config -e HZ_300 \
                --set-val HZ 300
        elif [ "$_HZ_ticks" = "250" ]; then
            echo "Setting tick rate to 250Hz..."
            scripts/config -d HZ_300 \
                -e HZ_250 \
                --set-val HZ 250
        elif [ "$_HZ_ticks" = "100" ]; then
            echo "Setting tick rate to 100Hz..."
            scripts/config -d HZ_300 \
                -e HZ_100 \
                --set-val HZ 100
        else
           if [ -n "$_HZ_ticks" ]; then
               error "The value $_HZ_ticks is invalid. Choose the correct one again."
           else
               error "The value is empty. Choose the correct one again."
           fi
           error "Selecting Setting tick rate failed!"
           exit
        fi

        ### Disable NUMA
        if false; then
            echo "Disabling NUMA from kernel config..."
            scripts/config -d NUMA \
                -d AMD_NUMA \
                -d X86_64_ACPI_NUMA \
                -d NODES_SPAN_OTHER_NODES \
                -d NUMA_EMU \
                -d NEED_MULTIPLE_NODES \
                -d USE_PERCPU_NUMA_NODE_ID \
                -d ACPI_NUMA \
                -d ARCH_SUPPORTS_NUMA_BALANCING \
                -d NODES_SHIFT \
                -u NODES_SHIFT \
                -d NEED_MULTIPLE_NODES
        fi

        ### Setting NR_CPUS
        echo "Setting NR_CPUS 32..."
        scripts/config --set-val NR_CPUS 32
        ### Select performance governor
        if [ -n "$_per_gov" ]; then
            echo "Setting performance governor..."
            scripts/config -d CPU_FREQ_DEFAULT_GOV_SCHEDUTIL \
                -e CPU_FREQ_DEFAULT_GOV_PERFORMANCE
        fi

        ### Select tick type
        if [ "$_tickrate" = "periodic" ]; then
            echo "Enabling periodic ticks..."
            scripts/config -d NO_HZ_IDLE \
                -d NO_HZ_FULL \
                -d NO_HZ \
                -d NO_HZ_COMMON \
                -e HZ_PERIODIC
        elif [ "$_tickrate" = "idle" ]; then
            echo "Enabling idle ticks.."
            scripts/config -d HZ_PERIODIC \
                -d NO_HZ_FULL \
                -e NO_HZ_IDLE \
                -e NO_HZ \
                -e NO_HZ_COMMON
        elif [ "$_tickrate" = "full" ]; then
            echo "Enabling full ticks..."
            scripts/config -d HZ_PERIODIC \
                -d NO_HZ_IDLE \
                -d CONTEXT_TRACKING_FORCE \
                -e NO_HZ_FULL_NODEF \
                -e NO_HZ_FULL \
                -e NO_HZ \
                -e NO_HZ_COMMON \
                -e CONTEXT_TRACKING
        else
            if [ -n "$_tickrate" ]; then
                error "The value $_tickrate is invalid. Choose the correct one again."
            else
                error "The value is empty. Choose the correct one again."
            fi
            error "Selecting the tick rate failed!"
            exit
        fi

        ### Select preempt type
        if [ "$_preempt" = "full" ]; then
            echo "Enabling low latency preempt..."
            scripts/config -e PREEMPT_BUILD \
                -d PREEMPT_NONE \
                -d PREEMPT_VOLUNTARY \
                -e PREEMPT \
                -e PREEMPT_COUNT \
                -e PREEMPTION \
                -e PREEMPT_DYNAMIC
        elif [ "$_preempt" = "voluntary" ]; then
            echo "Enabling voluntary preempt..."
            scripts/config -e PREEMPT_BUILD \
                -d PREEMPT_NONE \
                -e PREEMPT_VOLUNTARY \
                -d PREEMPT \
                -e PREEMPT_COUNT \
                -e PREEMPTION \
                -d PREEMPT_DYNAMIC
        elif [ "$_preempt" = "server" ]; then
            echo "Enabling server preempt..."
            scripts/config -e PREEMPT_NONE_BUILD \
                -e PREEMPT_NONE \
                -d PREEMPT_VOLUNTARY \
                -d PREEMPT \
                -d PREEMPT_COUNT \
                -d PREEMPTION \
                -d PREEMPT_DYNAMIC
        else
            if [ -n "$_preempt" ]; then
                error "The value $_preempt is invalid. Choose the correct one again."
            else
                error "The value is empty. Choose the correct one again."
            fi
            error "Selecting PREEMPT failed!"
            exit
        fi

        ### Enable O3
        echo "Enabling KBUILD_CFLAGS -O3..."
        scripts/config -d CC_OPTIMIZE_FOR_PERFORMANCE \
            -e CC_OPTIMIZE_FOR_PERFORMANCE_O3

        ### Enable bbr2
        if [ -n "$_tcp_bbr2" ]; then
            echo "Disabling TCP_CONG_CUBIC..."
            scripts/config -m TCP_CONG_CUBIC \
                -d DEFAULT_CUBIC \
                -e TCP_CONG_BBR2 \
                -e DEFAULT_BBR2 \
                --set-str DEFAULT_TCP_CONG bbr2
        fi

       ### Select LRU config
        if [ "$_lru_config" = "standard" ]; then
           echo "Enabling multigenerational LRU..."
           scripts/config -e LRU_GEN \
               -e LRU_GEN_ENABLED \
               -d LRU_GEN_STATS
        elif [ "$_lru_config" = "stats" ]; then
           echo "Enabling multigenerational LRU with stats..."
           scripts/config -e LRU_GEN \
               -e LRU_GEN_ENABLED \
               -e LRU_GEN_STATS
        elif [ "$_lru_config" = "none" ]; then
           echo "Disabling multigenerational LRU..."
           scripts/config -d LRU_GEN
        else
            if [ -n "$_lru_config" ]; then
               error "The value $_lru_config is invalid. Choose the correct one again."
            else
               error "The value is empty. Choose the correct one again."
            fi
             error "Enabling multigenerational LRU failed!"
             exit
        fi

        echo "Enable THP always..."
        scripts/config -d TRANSPARENT_HUGEPAGE_MADVISE \
            -e TRANSPARENT_HUGEPAGE_ALWAYS

        ### Enable DAMON
        if [ -n "$_damon" ]; then
            echo "Enabling DAMON..."
            scripts/config -e DAMON \
                -e DAMON_VADDR \
                -e DAMON_DBGFS \
                -e DAMON_SYSFS \
                -e DAMON_PADDR \
                -e DAMON_RECLAIM \
                -e DAMON_LRU_SORT
        fi

	    echo "Selecting PDS CPU scheduler..."
        scripts/config -e SCHED_ALT \
            -d SCHED_BMQ \
            -e SCHED_PDS

        ### Enable LRNG
        if true; then
            echo "Enabling Linux Random Number Generator ..."
            scripts/config -d RANDOM_DEFAULT_IMPL \
                -e LRNG \
                -e LRNG_SHA256 \
                -e LRNG_COMMON_DEV_IF \
                -e LRNG_DRNG_ATOMIC \
                -e LRNG_SYSCTL \
                -e LRNG_RANDOM_IF \
                -e LRNG_AIS2031_NTG1_SEEDING_STRATEGY \
                -m LRNG_KCAPI_IF \
                -m LRNG_HWRAND_IF \
                -e LRNG_DEV_IF \
                -e LRNG_RUNTIME_ES_CONFIG \
                -e LRNG_IRQ_DFLT_TIMER_ES \
                -d LRNG_SCHED_DFLT_TIMER_ES \
                -e LRNG_TIMER_COMMON \
                -d LRNG_COLLECTION_SIZE_256 \
                -d LRNG_COLLECTION_SIZE_512 \
                -e LRNG_COLLECTION_SIZE_1024 \
                -d LRNG_COLLECTION_SIZE_2048 \
                -d LRNG_COLLECTION_SIZE_4096 \
                -d LRNG_COLLECTION_SIZE_8192 \
                --set-val LRNG_COLLECTION_SIZE 1024 \
                -e LRNG_HEALTH_TESTS \
                --set-val LRNG_RCT_CUTOFF 31 \
                --set-val LRNG_APT_CUTOFF 325 \
                -e LRNG_IRQ \
                -e LRNG_CONTINUOUS_COMPRESSION_ENABLED \
                -d LRNG_CONTINUOUS_COMPRESSION_DISABLED \
                -e LRNG_ENABLE_CONTINUOUS_COMPRESSION \
                -e LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION \
                --set-val LRNG_IRQ_ENTROPY_RATE 256 \
                -e LRNG_JENT \
                --set-val LRNG_JENT_ENTROPY_RATE 16 \
                -e LRNG_CPU \
                --set-val LRNG_CPU_FULL_ENT_MULTIPLIER 1 \
                --set-val LRNG_CPU_ENTROPY_RATE 8 \
                -e LRNG_SCHED \
                --set-val LRNG_SCHED_ENTROPY_RATE 4294967295 \
                -e LRNG_DRNG_CHACHA20 \
                -m LRNG_DRBG \
                -m LRNG_DRNG_KCAPI \
                -e LRNG_SWITCH \
                -e LRNG_SWITCH_HASH \
                -m LRNG_HASH_KCAPI \
                -e LRNG_SWITCH_DRNG \
                -m LRNG_SWITCH_DRBG \
                -m LRNG_SWITCH_DRNG_KCAPI \
                -e LRNG_DFLT_DRNG_CHACHA20 \
                -d LRNG_DFLT_DRNG_DRBG \
                -d LRNG_DFLT_DRNG_KCAPI \
                -e LRNG_TESTING_MENU \
                -d LRNG_RAW_HIRES_ENTROPY \
                -d LRNG_RAW_JIFFIES_ENTROPY \
                -d LRNG_RAW_IRQ_ENTROPY \
                -d LRNG_RAW_RETIP_ENTROPY \
                -d LRNG_RAW_REGS_ENTROPY \
                -d LRNG_RAW_ARRAY \
                -d LRNG_IRQ_PERF \
                -d LRNG_RAW_SCHED_HIRES_ENTROPY \
                -d LRNG_RAW_SCHED_PID_ENTROPY \
                -d LRNG_RAW_SCHED_START_TIME_ENTROPY \
                -d LRNG_RAW_SCHED_NVCSW_ENTROPY \
                -d LRNG_SCHED_PERF \
                -d LRNG_ACVT_HASH \
                -d LRNG_RUNTIME_MAX_WO_RESEED_CONFIG \
                -d LRNG_TEST_CPU_ES_COMPRESSION \
                -e LRNG_SELFTEST \
                -d LRNG_SELFTEST_PANIC \
                -d LRNG_RUNTIME_FORCE_SEEDING_DISABLE
        fi

        ### Enable zram/zswap ZSTD compression
        if true; then
            echo "Enabling zram/swap ZSTD compression..."
            scripts/config -d ZRAM_DEF_COMP_LZORLE \
                -e ZRAM_DEF_COMP_ZSTD \
                --set-str ZRAM_DEF_COMP zstd \
                -d ZSWAP_COMPRESSOR_DEFAULT_LZ4 \
                -e ZSWAP_COMPRESSOR_DEFAULT_ZSTD \
                --set-str ZSWAP_COMPRESSOR_DEFAULT zstd
        fi

        ### Selecting the ZSTD modules and kernel compression level
        if [ "$_zstd_level_value" = "ultra" ]; then
            echo "Enabling highest ZSTD modules and kernel compression ratio..."
            scripts/config --set-val MODULE_COMPRESS_ZSTD_LEVEL 19 \
                -e MODULE_COMPRESS_ZSTD_ULTRA \
                --set-val MODULE_COMPRESS_ZSTD_LEVEL_ULTRA 22 \
                --set-val ZSTD_COMP_VAL 22
        elif [ "$_zstd_level_value" = "normal" ]; then
            echo "Enabling standard ZSTD modules and kernel compression ratio..."
            scripts/config --set-val MODULE_COMPRESS_ZSTD_LEVEL 9 \
                -d MODULE_COMPRESS_ZSTD_ULTRA \
                --set-val ZSTD_COMP_VAL 19
        else
            if [ -n "$_zstd_level_value" ]; then
                error "The value $_zstd_level_value is invalid. Choose the correct one again."
            else
                error "The value is empty. Choose the correct one again."
            fi
            error "Selecting the ZSTD modules and kernel compression level failed!"
            exit
        fi

        ### Disable DEBUG
        if true; then
            scripts/config -d DEBUG_INFO \
                -d DEBUG_INFO_BTF \
                -d DEBUG_INFO_DWARF4 \
                -d DEBUG_INFO_DWARF5 \
                -d PAHOLE_HAS_SPLIT_BTF \
                -d DEBUG_INFO_BTF_MODULES \
                -d SLUB_DEBUG \
                -d PM_DEBUG \
                -d PM_ADVANCED_DEBUG \
                -d PM_SLEEP_DEBUG \
                -d ACPI_DEBUG \
                -d SCHED_DEBUG \
                -d LATENCYTOP \
                -d DEBUG_PREEMPT
        
            # disable CONFIG_DEBUG_INFO=y at build time otherwise memory usage blows up
            # and can easily overwhelm a system with 32 GB of memory using a tmpfs build
            # partition ... this was introduced by FS#66260, see:
            # https://git.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/linux&id=663b08666b269eeeeaafbafaee07fd03389ac8d7
            scripts/config -d CONFIG_CGROUP_BPF
            scripts/config -d CONFIG_BPF_LSM
            scripts/config -d CONFIG_BPF_PRELOAD
            scripts/config -d CONFIG_BPF_LIRC_MODE2
            scripts/config -d CONFIG_BPF_KPROBE_OVERRIDE
        fi
      # https://bbs.archlinux.org/viewtopic.php?pid=1824594#p1824594
      scripts/config -e CONFIG_PSI_DEFAULT_DISABLED
      
        # FS#66613
        # https://bugzilla.kernel.org/show_bug.cgi?id=207173#c6
        scripts/config -d CONFIG_KVM_WERROR
        # https://bbs.archlinux.org/viewtopic.php?pid=1863567#p1863567
        scripts/config -d CONFIG_LATENCYTOP

        echo "Enable USER_NS_UNPRIVILEGED"
        scripts/config -e USER_NS
        echo "Enable WINE FASTSYNC"
        scripts/config -e WINESYNC
        
        scripts/config -e CONFIG_MODULES

        ### Rewrite configuration
        echo "Rewrite configuration..."
        make ${BUILD_FLAGS[*]} prepare 
        make ${BUILD_FLAGS[*]} modules_prepare 

        cd ${srcdir}/"zfs"
        ./autogen.sh
        sed -i "s|\$(uname -r)|${pkgver}-${pkgsuffix}|g" configure
        ./configure KERNEL_LLVM=1 CFLAGS="-O3 -march=znver2 -mtune=znver2 -Xclang -load -Xclang LLVMPolly.so -mllvm -polly -mllvm -polly-parallel -fopenmp -mllvm -polly-vectorizer=stripmine -mllvm -polly-omp-backend=LLVM -mllvm -polly-num-threads=36 -mllvm -polly-scheduling=dynamic -mllvm -polly-scheduling-chunksize=1 -mllvm -polly-ast-use-context -mllvm -polly-invariant-load-hoisting -mllvm -polly-loopfusion-greedy -mllvm -polly-run-inliner -mllvm -polly-run-dce -fno-math-errno -fno-trapping-math -falign-functions=32 -fno-semantic-interposition -fcf-protection=none" CC=clang LD=ld.lld --prefix=/usr --sysconfdir=/etc --sbindir=/usr/bin --libdir=/usr/lib \
            --datadir=/usr/share --includedir=/usr/include --with-udevdir=/lib/udev \
            --libexecdir=/usr/lib/zfs --with-config=kernel \
            -e-linux-builtin \
            --with-linux=${srcdir}/$_srcname
        ./copy-builtin ${srcdir}/${_srcname}

        cd ${srcdir}/${_srcname}
        scripts/config -e CONFIG_ZFS

        yes "" | make ${BUILD_FLAGS[*]} config >/dev/null
        diff -u ../config .config || :

        ### Prepared version
        make ${BUILD_FLAGS[*]} -s kernelrelease > version
        echo "Prepared $pkgbase version $(<version)"

	#make ${BUILD_FLAGS[*]} menuconfig


        ### Save configuration for later reuse
        echo "Save configuration for later reuse..."
        cat .config > "${startdir}/config-${pkgver}-${pkgrel}${pkgbase#linux}"

    }

    build() {

        cd ${srcdir}/${_srcname}
        make ${BUILD_FLAGS[*]} --debug=a all -j4
    }

    _package() {
        pkgdesc="The $pkgdesc kernel and modules"
        depends=('coreutils' 'kmod' 'mkinitcpio')
        optdepends=('wireless-regdb: to set the correct wireless channels of your country'
                    'linux-firmware: firmware images needed for some devices'
                    'modprobed-db: Keeps track of EVERY kernel module that has ever been probed - useful for those of us who make localmodconfig'
                    'uksmd: Userspace KSM helper daemon')
        provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE KSMBD-MODULE UKSMD-BUILTIN)

        cd ${srcdir}/$_srcname

        local kernver="$(<version)"
        local modulesdir="$pkgdir/usr/lib/modules/$kernver"

        echo "Installing boot image..."
        # systemd expects to find the kernel here to allow hibernation
        # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
        install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

        # Used by mkinitcpio to name the kernel
        echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

        echo "Installing modules..."
        make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install  # not Suppress depmod

        # remove build and source links
        rm "$modulesdir"/{source,build}
    }

    _package-headers() {
        pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
        depends=('pahole' linux-${pkgsuffix}-zen2 )

        cd ${srcdir}/${_srcname}
        local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

        echo "Installing build files..."
        install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
            localversion.* version vmlinux
        install -Dt "$builddir/kernel" -m644 kernel/Makefile
        install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
        cp -t "$builddir" -a scripts

        # required when STACK_VALIDATION is enabled
        install -Dt "$builddir/tools/objtool" tools/objtool/objtool

        # required when DEBUG_INFO_BTF_MODULES is enabled
        if [ -f tools/bpf/resolve_btfids/resolve_btfids ]; then
            install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids
        fi

        echo "Installing headers..."
        cp -t "$builddir" -a include
        cp -t "$builddir/arch/x86" -a arch/x86/include
        install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

        install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
        install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

        # https://bugs.archlinux.org/task/13146
        install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

        # https://bugs.archlinux.org/task/20402
        install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
        install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
        install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

        # https://bugs.archlinux.org/task/71392
        install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

        echo "Installing KConfig files..."
        find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

        echo "Removing unneeded architectures..."
        local arch
        for arch in "$builddir"/arch/*/; do
            [[ $arch = */x86/ ]] && continue
            echo "Removing $(basename "$arch")"
            rm -r "$arch"
        done

        echo "Removing documentation..."
        rm -r "$builddir/Documentation"

        echo "Removing broken symlinks..."
        find -L "$builddir" -type l -printf 'Removing %P\n' -delete

        echo "Removing loose objects..."
        find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

        echo "Stripping build tools..."
        local file
        while read -rd '' file; do
            case "$(file -bi "$file")" in
                application/x-sharedlib\;*)      # Libraries (.so)
                    strip -v $STRIP_SHARED "$file" ;;
                application/x-archive\;*)        # Libraries (.a)
                    strip -v $STRIP_STATIC "$file" ;;
                application/x-executable\;*)     # Binaries
                    strip -v $STRIP_BINARIES "$file" ;;
                application/x-pie-executable\;*) # Relocatable binaries
                    strip -v $STRIP_SHARED "$file" ;;
            esac
        done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

        echo "Stripping vmlinux..."
        strip -v $STRIP_STATIC "$builddir/vmlinux"

        echo "Adding symlink..."
        mkdir -p "$pkgdir/usr/src"
        ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
    }

# _package-zfs(){
#     pkgdesc="zfs module for the $pkgdesc kernel"
#     depends=('pahole' linux-$pkgsuffix=$_kernver)

#     cd ${srcdir}/"zfs"
#     install -dm755 "$pkgdir/usr/lib/modules/${_kernver}-${pkgsuffix}"
#     install -m644 module/*/*.ko "$pkgdir/usr/lib/modules/${_kernver}-${pkgsuffix}"
#     find "$pkgdir" -name '*.ko' -exec zstd --rm -10 {} +
#     #  sed -i -e "s/EXTRAMODULES='.*'/EXTRAMODULES='${pkgver}-${pkgbase}'/" "$startdir/zfs.install"
# }


    pkgname=("$pkgbase" "$pkgbase-headers")
    for _p in "${pkgname[@]}"; do
        eval "package_$_p() {
        $(declare -f "_package${_p#$pkgbase}")
        _package${_p#$pkgbase}
        }"
    done

    sha256sums=('67dacc2b78605a56e997f4c08d009be87c98ec66f1870220226c8b3cc676590f'
                'b782e644a0265c9241b225e14127024aaf5a52a5e19bf8797b4b88c1156d1faf'
                '34e2cad286f32d8c1c26e4ff18726c9e0aee151e82088bb78c3ae4fb536bf962'
                'e1d45b5842079a5f0f53d7ea2d66ffa3f1497766f3ccffcf13ed00f1ac67f95e'
                'dee8ed716d713f27c8d75a1cef6eabf4ddcb63fe4e37d5b9cf47b25d791e5ea0'
                '2b9f45f0cc8e7c4871cd75e0932b03f2a0c633db9a875af1f308d4f4976d0948')

