pkgsuffix=tikogasa-zen2
pkgbase=linux-$pkgsuffix
_major=6.3
_minor=5
#_minorc=$((_minor+1))
#_rcver=rc8
pkgver=${_major}.${_minor}
_stable=${_major}.${_minor}
#_stable=${_major}
#_stablerc=${_major}-${_rcver}
_srcname=linux-${_stable}
#_srcname=linux-${_major}
pkgdesc='Linux PDS scheduler Kernel with compile-improvements and patches from some disrobutions for amd zen2 cpu'
pkgrel=1
_kernver=$pkgver-$pkgrel
arch=('x86_64' 'x86_64_v3')
url="https://github.com/CachyOS/linux-cachyos"
license=('GPL2')
options=('!strip')
_commit=fdbdf7e0ec56cd59e11d024c473e766429271a5c
makedepends=(bc libelf pahole cpio perl libc++ openmp tar zstd xz gcc initramfs kmod python git llvm llvm-libs clang lld polly make patch python kmod)
BUILD_FLAGS="LLVM=1 LLVM_IAS=1 CC=clang CXX=clang++ LD=ld.lld "
_patchsource="https://raw.githubusercontent.com/cachyos/kernel-patches/master/${_major}"
source=(
    #"clang"
    #"ld.lld"
    "https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/${_srcname}.tar.xz"
    #"https://mirrors.bfsu.edu.cn/kernel/v${pkgver%%.*}.x/${_srcname}.tar.xz"
    "clearlinux-linux::git+https://github.com/clearlinux-pkgs/linux"
    "linux-patches::git+https://github.com/xanmod/linux-patches"
    "config"
    "test.c"
    "0001-makefile-clang-polly-ms178.patch"
    #"https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.6/clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04.tar.xz"
    "https://raw.githubusercontent.com/zhmars/cjktty-patches/master/v6.x/cjktty-${_major}.patch"
    "${_patchsource}/all/0001-cachyos-base-all.patch"
#     "${_patchsource}/misc/0001-bcachefs.patch"
    "${_patchsource}/sched/0001-EEVDF.patch"
    "${_patchsource}/sched/0001-bore-eevdf.patch"
    "${_patchsource}/misc/0001-lrng.patch"
    "git+https://github.com/cachyos/zfs.git#commit=ac18dc77f3703940682aecb442f4e58aa2c14f1a"
)

export KBUILD_BUILD_HOST=cleararch
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

_make_alt() {
    test -s version
    make KERNELRELEASE="$(<version)" "$@"
}

prepare() {
    clang ${srcdir}/test.c -O3 -march=znver2 -mtune=znver2 -Xclang -load -Xclang LLVMPolly.so -mllvm -polly -mllvm -polly-parallel -fopenmp -mllvm -polly-vectorizer=stripmine -mllvm -polly-omp-backend=LLVM -mllvm -polly-num-threads=36 -mllvm -polly-scheduling=dynamic -mllvm -polly-scheduling-chunksize=1 -mllvm -polly-ast-use-context -mllvm -polly-invariant-load-hoisting -mllvm -polly-loopfusion-greedy -mllvm -polly-run-inliner -mllvm -polly-run-dce -fno-math-errno -fno-trapping-math -falign-functions=32 -fno-semantic-interposition -fcf-protection=none -std=gnu18 -o ${srcdir}/test.out
    #cp clearlinux-linux/*.patch ./
    #cp linux-patches/linux-${_major}.y-xanmod/xanmod/*.patch ./
    cd ${srcdir}/$_srcname

    echo "Setting version..."
    echo "-$pkgrel" >localversion.10-pkgrel
    echo "${pkgbase#linux}" >localversion.20-pkgname
    make ${BUILD_FLAGS[*]} defconfig
    make ${BUILD_FLAGS[*]} -s kernelrelease > version
    make ${BUILD_FLAGS[*]} mrproper

    local src
    for src in "${source[@]}"; do
        src="${src%%::*}"
        src="${src##*/}"
        [[ $src = *.patch ]] || continue
        echo "Applying patch $src..."
        patch -Np1 <"../$src"
    done

    echo "Setting config..."
    cp ../config .config

    ### Select CPU optimization
    MARCH=$(echo $_processor_opt | tr '[:lower:]' '[:upper:]' && echo)
    MARCH2=MZEN2
    scripts/config -k -d CONFIG_GENERIC_CPU
    scripts/config -k -e CONFIG_${MARCH2}

    ### Selecting CachyOS config
    echo "Enabling CachyOS config..."
    scripts/config -e CACHY

    ### Select LLVM level
    echo "Enabling LLVM THIN LTO..."
    scripts/config -e LTO \
        -e LTO_CLANG \
        -e ARCH_SUPPORTS_LTO_CLANG \
        -e ARCH_SUPPORTS_LTO_CLANG_THIN \
        -d LTO_NONE \
        -e HAS_LTO_CLANG \
        -d LTO_CLANG_FULL \
        -e LTO_CLANG_THIN \
        -e HAVE_GCC_PLUGINS

    ### Select tick rate
    echo "Setting tick rate to 2k Hz..."
    scripts/config -d HZ_300 \
        -e HZ_1000 \
        --set-val HZ 1000

    ### Enable BORE scheduler
     echo "Selecting BORE CPU scheduler..."
    scripts/config -e SCHED_BORE

    ### Setting NR_CPUS
    echo "Setting NR_CPUS 32..."
    scripts/config --set-val NR_CPUS 32

    echo "Enabling full ticks..."
    scripts/config -d HZ_PERIODIC \
        -d NO_HZ_IDLE \
        -d CONTEXT_TRACKING_FORCE \
        -e NO_HZ_FULL_NODEF \
        -e NO_HZ_FULL \
        -e NO_HZ \
        -e NO_HZ_COMMON \
        -e CONTEXT_TRACKING

    ### Select preempt type
    echo "Enabling low latency preempt..."
    scripts/config -e PREEMPT_BUILD \
        -d PREEMPT_NONE \
        -d PREEMPT_VOLUNTARY \
        -e PREEMPT \
        -e PREEMPT_COUNT \
        -e PREEMPTION \
        -e PREEMPT_DYNAMIC

    ### Enable O3
    echo "Enabling KBUILD_CFLAGS -O3..."
    scripts/config -d CC_OPTIMIZE_FOR_PERFORMANCE \
        -e CC_OPTIMIZE_FOR_PERFORMANCE_O3

    ### Enable bbr2
    echo "Enabling bbr2"
    echo "Disabling TCP_CONG_CUBIC..."
    scripts/config -m TCP_CONG_CUBIC \
        -d DEFAULT_CUBIC \
        -e TCP_CONG_BBR2 \
        -e DEFAULT_BBR2 \
        --set-str DEFAULT_TCP_CONG bbr2
    # BBR2 doesn't work properly with FQ_CODEL
    echo "Disabling fq_codel by default..."
    scripts/config -m NET_SCH_FQ_CODEL \
        -e NET_SCH_FQ \
        -d DEFAULT_FQ_CODEL \
        -e DEFAULT_FQ \
        --set-str DEFAULT_NET_SCH fq

    ### Select LRU config
    echo "Enabling multigenerational LRU..."
    scripts/config -e LRU_GEN \
        -e LRU_GEN_ENABLED \
        -d LRU_GEN_STATS

    echo "Enable THP always..."
    scripts/config -d TRANSPARENT_HUGEPAGE_MADVISE \
        -e TRANSPARENT_HUGEPAGE_ALWAYS

    ### Enable LRNG
    echo "Enabling Linux Random Number Generator ..."
    scripts/config -d RANDOM_DEFAULT_IMPL \
        -e LRNG \
        -e LRNG_SHA256 \
        -e LRNG_COMMON_DEV_IF \
        -e LRNG_DRNG_ATOMIC \
        -e LRNG_SYSCTL \
        -e LRNG_RANDOM_IF \
        -e LRNG_AIS2031_NTG1_SEEDING_STRATEGY \
        -m LRNG_KCAPI_IF \
        -m LRNG_HWRAND_IF \
        -e LRNG_DEV_IF \
        -e LRNG_RUNTIME_ES_CONFIG \
        -e LRNG_IRQ_DFLT_TIMER_ES \
        -d LRNG_SCHED_DFLT_TIMER_ES \
        -e LRNG_TIMER_COMMON \
        -d LRNG_COLLECTION_SIZE_256 \
        -d LRNG_COLLECTION_SIZE_512 \
        -e LRNG_COLLECTION_SIZE_1024 \
        -d LRNG_COLLECTION_SIZE_2048 \
        -d LRNG_COLLECTION_SIZE_4096 \
        -d LRNG_COLLECTION_SIZE_8192 \
        --set-val LRNG_COLLECTION_SIZE 1024 \
        -e LRNG_HEALTH_TESTS \
        --set-val LRNG_RCT_CUTOFF 31 \
        --set-val LRNG_APT_CUTOFF 325 \
        -e LRNG_IRQ \
        -e LRNG_CONTINUOUS_COMPRESSION_ENABLED \
        -d LRNG_CONTINUOUS_COMPRESSION_DISABLED \
        -e LRNG_ENABLE_CONTINUOUS_COMPRESSION \
        -e LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION \
        --set-val LRNG_IRQ_ENTROPY_RATE 256 \
        -e LRNG_JENT \
        --set-val LRNG_JENT_ENTROPY_RATE 16 \
        -e LRNG_CPU \
        --set-val LRNG_CPU_FULL_ENT_MULTIPLIER 1 \
        --set-val LRNG_CPU_ENTROPY_RATE 8 \
        -e LRNG_SCHED \
        --set-val LRNG_SCHED_ENTROPY_RATE 4294967295 \
        -e LRNG_DRNG_CHACHA20 \
        -m LRNG_DRBG \
        -m LRNG_DRNG_KCAPI \
        -e LRNG_SWITCH \
        -e LRNG_SWITCH_HASH \
        -m LRNG_HASH_KCAPI \
        -e LRNG_SWITCH_DRNG \
        -m LRNG_SWITCH_DRBG \
        -m LRNG_SWITCH_DRNG_KCAPI \
        -e LRNG_DFLT_DRNG_CHACHA20 \
        -d LRNG_DFLT_DRNG_DRBG \
        -d LRNG_DFLT_DRNG_KCAPI \
        -e LRNG_TESTING_MENU \
        -d LRNG_RAW_HIRES_ENTROPY \
        -d LRNG_RAW_JIFFIES_ENTROPY \
        -d LRNG_RAW_IRQ_ENTROPY \
        -d LRNG_RAW_RETIP_ENTROPY \
        -d LRNG_RAW_REGS_ENTROPY \
        -d LRNG_RAW_ARRAY \
        -d LRNG_IRQ_PERF \
        -d LRNG_RAW_SCHED_HIRES_ENTROPY \
        -d LRNG_RAW_SCHED_PID_ENTROPY \
        -d LRNG_RAW_SCHED_START_TIME_ENTROPY \
        -d LRNG_RAW_SCHED_NVCSW_ENTROPY \
        -d LRNG_SCHED_PERF \
        -d LRNG_ACVT_HASH \
        -d LRNG_RUNTIME_MAX_WO_RESEED_CONFIG \
        -d LRNG_TEST_CPU_ES_COMPRESSION \
        -e LRNG_SELFTEST \
        -d LRNG_SELFTEST_PANIC \
        -d LRNG_RUNTIME_FORCE_SEEDING_DISABLE

    ### Enable zram/zswap ZSTD compression
    echo "Enabling zram/swap ZSTD compression..."
    scripts/config -d ZRAM_DEF_COMP_LZORLE \
        -e ZRAM_DEF_COMP_ZSTD \
        --set-str ZRAM_DEF_COMP zstd \
        -d ZSWAP_COMPRESSOR_DEFAULT_LZ4 \
        -e ZSWAP_COMPRESSOR_DEFAULT_ZSTD \
        --set-str ZSWAP_COMPRESSOR_DEFAULT zstd

### Disable DEBUG
    scripts/config -d DEBUG_INFO \
        -d DEBUG_INFO_BTF \
        -d DEBUG_INFO_DWARF4 \
        -d DEBUG_INFO_DWARF5 \
        -d PAHOLE_HAS_SPLIT_BTF \
        -d DEBUG_INFO_BTF_MODULES \
        -d SLUB_DEBUG \
        -d PM_DEBUG \
        -d PM_ADVANCED_DEBUG \
        -d PM_SLEEP_DEBUG \
        -d ACPI_DEBUG \
        -d SCHED_DEBUG \
        -d LATENCYTOP \
        -d DEBUG_PREEMPT

    # disable CONFIG_DEBUG_INFO=y at build time otherwise memory usage blows up
    # and can easily overwhelm a system with 32 GB of memory using a tmpfs build
    # partition ... this was introduced by FS#66260, see:
    # https://git.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/linux&id=663b08666b269eeeeaafbafaee07fd03389ac8d7
    scripts/config -d CONFIG_CGROUP_BPF
    scripts/config -d CONFIG_BPF_LSM
    scripts/config -d CONFIG_BPF_PRELOAD
    scripts/config -d CONFIG_BPF_LIRC_MODE2
    scripts/config -d CONFIG_BPF_KPROBE_OVERRIDE

    # https://bbs.archlinux.org/viewtopic.php?pid=1824594#p1824594
    scripts/config -e CONFIG_PSI_DEFAULT_DISABLED

    # FS#66613
    # https://bugzilla.kernel.org/show_bug.cgi?id=207173#c6
    scripts/config -d CONFIG_KVM_WERROR
    # https://bbs.archlinux.org/viewtopic.php?pid=1863567#p1863567
    scripts/config -d CONFIG_LATENCYTOP

    echo "Enable USER_NS_UNPRIVILEGED"
    scripts/config -e USER_NS
    #echo "Enable WINE FASTSYNC"
    #scripts/config -e WINESYNC

    scripts/config -e CONFIG_MODULES

    ### Rewrite configuration
    echo "Rewrite configuration..."
    _make_alt ${BUILD_FLAGS[*]} CFLAGS="-Xclang -load -Xclang LLVMPolly.so" CXXFLAGS="-Xclang -load -Xclang LLVMPolly.so -stdlib=libc++" prepare
    _make_alt ${BUILD_FLAGS[*]} CFLAGS="-Xclang -load -Xclang LLVMPolly.so" CXXFLAGS="-Xclang -load -Xclang LLVMPolly.so -stdlib=libc++" modules_prepare

    cd ${srcdir}/"zfs"
    ./autogen.sh
    sed -i "s|\$(uname -r)|${pkgver}-${pkgsuffix}|g" configure
    ./configure KERNEL_LLVM=1 CFLAGS="-O3 -march=znver2 -mtune=znver2 -Xclang -load -Xclang LLVMPolly.so -mllvm -polly -mllvm -polly-parallel -fopenmp -mllvm -polly-vectorizer=stripmine -mllvm -polly-omp-backend=LLVM -mllvm -polly-num-threads=36 -mllvm -polly-scheduling=dynamic -mllvm -polly-scheduling-chunksize=1 -mllvm -polly-ast-use-context -mllvm -polly-invariant-load-hoisting -mllvm -polly-loopfusion-greedy -mllvm -polly-run-inliner -mllvm -polly-run-dce -fno-math-errno -fno-trapping-math -falign-functions=32 -fno-semantic-interposition -fcf-protection=none -mcx16 -mpclmul -mpopcnt -msse3 -msse4.1 -msse4.2 -mssse3 -mavx -mavx2 -mbmi -mbmi2 -mf16c -mfma -mlzcnt -mmovbe -mxsave" CC=clang LD=ld.lld --prefix=/usr --sysconfdir=/etc --sbindir=/usr/bin --libdir=/usr/lib \
        --datadir=/usr/share --includedir=/usr/include --with-udevdir=/lib/udev \
        --libexecdir=/usr/lib/zfs --with-config=kernel \
        --enable-linux-builtin \
        --with-linux=${srcdir}/$_srcname
    ./copy-builtin ${srcdir}/${_srcname}

    cd ${srcdir}/${_srcname}
    scripts/config -e CONFIG_ZFS

    yes "" | _make_alt ${BUILD_FLAGS[*]} CFLAGS="-Xclang -load -Xclang LLVMPolly.so" CXXFLAGS="-Xclang -load -Xclang LLVMPolly.so -stdlib=libc++" config >/dev/null
    diff -u ../config .config || :

    ### Prepared version
    echo "Prepared $pkgbase version $(<version)"

    # make ${BUILD_FLAGS[*]} menuconfig

    ### Save configuration for later reuse
    echo "Save configuration for later reuse..."
    cat .config >"${startdir}/config-${pkgver}-${pkgrel}${pkgbase#linux}"

}

build() {
    cd ${srcdir}/${_srcname}
    make ${BUILD_FLAGS[*]} all -j4
}

_package() {
    pkgdesc="The $pkgdesc kernel and modules"
    depends=('coreutils' 'kmod' 'mkinitcpio')
    optdepends=('wireless-regdb: to set the correct wireless channels of your country'
        'linux-firmware: firmware images needed for some devices'
        'modprobed-db: Keeps track of EVERY kernel module that has ever been probed - useful for those of us who make localmodconfig'
        'uksmd: Userspace KSM helper daemon')
    provides=(VIRTUALBOX-GUEST-MODULES ZFS-MODULE WIREGUARD-MODULE KSMBD-MODULE UKSMD-BUILTIN)

    cd ${srcdir}/$_srcname

    local modulesdir="$pkgdir/usr/lib/modules/$kernver"

    echo "Installing boot image..."
    # systemd expects to find the kernel here to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(_make_alt -s image_name)" "$modulesdir/vmlinuz"

    # Used by mkinitcpio to name the kernel
    echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

    echo "Installing modules..."
    _make_alt INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
        DEPMOD=/doesnt/exist  modules_install  # Suppress depmod

    # remove build and source links
    rm "$modulesdir"{source,build}
}

_package-headers() {
    pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
    depends=('pahole' linux-${pkgsuffix})

    cd ${srcdir}/${_srcname}
    local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

    echo "Installing build files..."
    install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
        localversion.* version vmlinux
    install -Dt "$builddir/kernel" -m644 kernel/Makefile
    install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
    cp -t "$builddir" -a scripts

    # required when STACK_VALIDATION is enabled
    install -Dt "$builddir/tools/objtool" tools/objtool/objtool

    # required when DEBUG_INFO_BTF_MODULES is enabled
    if [ -f tools/bpf/resolve_btfids/resolve_btfids ]; then
        install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids
    fi

    echo "Installing headers..."
    cp -t "$builddir" -a include
    cp -t "$builddir/arch/x86" -a arch/x86/include
    install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

    install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
    install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

    # https://bugs.archlinux.org/task/13146
    install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

    # https://bugs.archlinux.org/task/20402
    install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
    install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
    install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

    # https://bugs.archlinux.org/task/71392
    install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

    echo "Installing KConfig files..."
    find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

    echo "Removing unneeded architectures..."
    local arch
    for arch in "$builddir"/arch/*/; do
        [[ $arch = */x86/ ]] && continue
        echo "Removing $(basename "$arch")"
        rm -r "$arch"
    done

    echo "Removing documentation..."
    rm -r "$builddir/Documentation"

    echo "Removing broken symlinks..."
    find -L "$builddir" -type l -printf 'Removing %P\n' -delete

    echo "Removing loose objects..."
    find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

    echo "Stripping build tools..."
    local file
    while read -rd '' file; do
        case "$(file -Sib "$file")" in
        application/x-sharedlib\;*) # Libraries (.so)
            strip -v $STRIP_SHARED "$file" ;;
        application/x-archive\;*) # Libraries (.a)
            strip -v $STRIP_STATIC "$file" ;;
        application/x-executable\;*) # Binaries
            strip -v $STRIP_BINARIES "$file" ;;
        application/x-pie-executable\;*) # Relocatable binaries
            strip -v $STRIP_SHARED "$file" ;;
        esac
    done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

    echo "Stripping vmlinux..."
    strip -v $STRIP_STATIC "$builddir/vmlinux"

    echo "Adding symlink..."
    mkdir -p "$pkgdir/usr/src"
    ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
    eval "package_$_p() {
        $(declare -f "_package${_p#$pkgbase}")
        _package${_p#$pkgbase}
        }"
done

b2sums=('646a94591eae93db9301a11e5300579c8cce7d2a544727cb88efed86d05ba070a247498d9c83d7b7cdbead4e7d46537134c877813aa7f188dd36b403c58d0c11'
        'SKIP'
        'SKIP'
        '79dcdebaa7c3bd209d7a64b24f1440d84cd0fb380df65f60c06da284a6d5c54760880bbd9950b551140e9704a6e085c9bf7aaf52126f37f4cefc6034245fe7b2'
        '0bd40791b5df303f88b23676403c678307fb5d49baa569c217cff12166ceac29560d7eb3cfa2e4c6cbb0433aa3d1715d5f1fa4f57f4e3c8c6788b82950f85537'
        '7ae11354cee8735e81e8328a8fb2bc4c1e576b2aea9dd5f3f40aa123f40fbca47a01688e1c605e07f72fd189f1836854ffba8f41c26b43912b8f0db15ff64dc3'
        '8176dce642d239ed6747ec77697ae4025e2584ab33d3f77c4a6cdd81eec187bece44de8c0592eb61e308fcdf03a914610d6c0f5db4d5273bb547ecfe66ebb643'
        '0008b4bfc896a1212abae61dd2b0f1ce68220f48a064a97aa1988e8c46058f8c23c4db85f99cb9fb5ecf311b2aefe78a081cd064e6ac5d5830dab2449ba7a40b'
        '7740148bce24e4e51ef260405def1c9afd1eabffeca1c1db8e5e57437c0e63b0504bddb6519df77fdc9cc702a1613f183032b76e88cae2a8012bc504026560bf'
        '55d452686eecbba6cbdfa65d0c1892b48370ca42d14c442e99df1457a415c7573f80272bee97081de0924b75730c5c209ea38974f8adf966e1227116cda0da02'
        '9343c9be5818cc4babdb92800ffb47fd4b4a58a8c3f1915dd26030c24c2ae9d48ff9942b4625a53d644997c897df8515c27e75de9b8e9be3282fcf4979333c47'
        'SKIP')
