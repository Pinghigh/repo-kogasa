pkgsuffix=tikogasa-zen2
pkgbase=linux-$pkgsuffix
_major=6.5
_minor=2
#_minorc=$((_minor+1))
#_rcver=rc8
pkgver=${_major}.${_minor}
_stable=${_major}.${_minor}
#_stable=${_major}
#_stablerc=${_major}-${_rcver}
_srcname=linux-${_stable}
#_srcname=linux-${_major}
pkgdesc='Linux BORE-EEVDF scheduler Kernel with compile-improvements and patches from some disrobutions for amd zen2 cpu'
pkgrel=1
_kernver=$pkgver-$pkgrel
arch=('x86_64')
url="https://github.com/CachyOS/linux-cachyos"
license=('GPL2')
options=('!strip')
makedepends=(bc libelf pahole cpio perl libc++ openmp tar zstd xz gcc initramfs kmod git llvm llvm-libs clang lld polly make patch python kmod mold)
BUILD_FLAGS="LLVM=1 LLVM_IAS=1 CC=clang CXX=clang++ LD=ld.lld "
_patchsource="https://raw.githubusercontent.com/cachyos/kernel-patches/master/${_major}"
_ck_patchsource="https://raw.githubusercontent.com/graysky2/linux-patches/master/linux-${_major}.y/ck-hrtimer"
source=(
        #"clang"
        #"ld.lld"
        "https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/${_srcname}.tar.xz"
        # "https://mirrors.bfsu.edu.cn/kernel/v${pkgver%%.*}.x/${_srcname}.tar.xz"
        "config"
        "test.c"
        "0001-opt-add-some-compilation-flags.patch"
        "https://raw.githubusercontent.com/zhmars/cjktty-patches/master/v6.x/cjktty-${_major}.patch"
        "${_patchsource}/all/0001-cachyos-base-all.patch"
        "${_patchsource}/sched/0001-EEVDF-cachy.patch"
        "${_patchsource}/sched/0001-bore-eevdf.patch"
        "${_patchsource}/misc/0001-lrng.patch"
        "git+https://github.com/openzfs/zfs.git#commit=3602775330b332a88b1cdf1e8daa8a31c524a3de"

        # -ck patches
        ${_ck_patchsource}/0001-hrtimer-Create-highres-timeout-variants-of-schedule_.patch
        ${_ck_patchsource}/0002-time-Special-case-calls-of-schedule_timeout-1-to-use.patch
        ${_ck_patchsource}/0003-time-Special-case-calls-of-schedule_timeout-1-to-use.patch
        ${_ck_patchsource}/0004-hrtimer-Replace-all-schedule-timeout-1-with-schedule.patch
        ${_ck_patchsource}/0005-hrtimer-Replace-all-calls-to-schedule_timeout_interr.patch
        ${_ck_patchsource}/0006-hrtimer-Replace-all-calls-to-schedule_timeout_uninte.patch
        ${_ck_patchsource}/0007-time-Don-t-use-hrtimer-overlay-when-pm_freezing-sinc.patch
        ${_ck_patchsource}/0008-clockevents-hrtimer-Make-hrtimer-granularity-and-min.patch
)

export KBUILD_BUILD_HOST=kogasa
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

_make_alt() {
        test -s version
        make KERNELRELEASE="$(<version)" "$@"
}

prepare() {
        # clang ${srcdir}/test.c -O3 -march=znver2 -mtune=znver2 -Xclang -load -Xclang LLVMPolly.so -mllvm -polly -mllvm -polly-parallel -fopenmp -mllvm -polly-vectorizer=stripmine -mllvm -polly-omp-backend=LLVM -mllvm -polly-scheduling=dynamic -mllvm -polly-ast-use-context -mllvm -polly-invariant-load-hoisting -mllvm -polly-loopfusion-greedy -mllvm -polly-run-inliner -mllvm -polly-run-dce -fno-math-errno -fno-trapping-math -falign-functions=32 -fno-semantic-interposition -fcf-protection=none -std=gnu18 ${srcdir}/test.out

        cd ${srcdir}/$_srcname

        echo "Setting version..."
        echo "-$pkgrel" >localversion.10-pkgrel
        echo "${pkgbase#linux}" >localversion.20-pkgname
        make ${BUILD_FLAGS[*]} defconfig -j3
        make ${BUILD_FLAGS[*]} -s kernelrelease >version
        make ${BUILD_FLAGS[*]} mrproper -j3

        local src
        for src in "${source[@]}"; do
                src="${src%%::*}"
                src="${src##*/}"
                [[ $src = *.patch ]] || continue
                echo "Applying patch $src..."
                patch -Np1 <"../$src"
        done

        echo "Setting config..."
        cp ../config .config

        ### Select CPU optimization
        MARCH=$(echo $_processor_opt | tr '[:lower:]' '[:upper:]' && echo)
        MARCH2=MZEN2
        scripts/config -k -d CONFIG_GENERIC_CPU
        scripts/config -k -e CONFIG_${MARCH2}

        ### Selecting CachyOS config
        echo "Enabling CachyOS config..."
        scripts/config -e CACHY

        ### Select LLVM level
        echo "Enabling LLVM THIN LTO..."
        scripts/config -e LTO \
                -e LTO_CLANG \
                -e ARCH_SUPPORTS_LTO_CLANG \
                -e ARCH_SUPPORTS_LTO_CLANG_THIN \
                -d LTO_NONE \
                -e HAS_LTO_CLANG \
                -d LTO_CLANG_FULL \
                -e LTO_CLANG_THIN \
                -e HAVE_GCC_PLUGINS

        ### Select tick rate
        echo "Setting tick rate to 2k Hz..."
        scripts/config -d HZ_300 \
                -e HZ_1000 \
                --set-val HZ 1000

        ### Enable BORE scheduler
        echo "Selecting BORE CPU scheduler..."
        scripts/config -e SCHED_BORE

        ### Setting NR_CPUS
        echo "Setting NR_CPUS 32..."
        scripts/config --set-val NR_CPUS 32

        echo "Enabling full ticks..."
        scripts/config -d HZ_PERIODIC \
                -d NO_HZ_IDLE \
                -d CONTEXT_TRACKING_FORCE \
                -e NO_HZ_FULL_NODEF \
                -e NO_HZ_FULL \
                -e NO_HZ \
                -e NO_HZ_COMMON \
                -e CONTEXT_TRACKING

        ### Select preempt type
        echo "Enabling low latency preempt..."
        scripts/config -e PREEMPT_BUILD \
                -d PREEMPT_NONE \
                -d PREEMPT_VOLUNTARY \
                -e PREEMPT \
                -e PREEMPT_COUNT \
                -e PREEMPTION \
                -e PREEMPT_DYNAMIC

        ### Enable O3
        echo "Enabling KBUILD_CFLAGS -O3..."
        scripts/config -d CC_OPTIMIZE_FOR_PERFORMANCE \
                -e CC_OPTIMIZE_FOR_PERFORMANCE_O3

        ### Enable bbr3
        echo "Enabling bbr3"
        echo "Disabling TCP_CONG_CUBIC..."
         echo "Disabling TCP_CONG_CUBIC..."
        scripts/config -m TCP_CONG_CUBIC \
            -d DEFAULT_CUBIC \
            -e TCP_CONG_BBR \
            -e DEFAULT_BBR \
            --set-str DEFAULT_TCP_CONG bbr

        # BBR3 doesn't work properly with FQ_CODEL
        echo "Disabling fq_codel by default..."
        scripts/config -m NET_SCH_FQ_CODEL \
            -e NET_SCH_FQ \
            -d DEFAULT_FQ_CODEL \
            -e DEFAULT_FQ \
            --set-str DEFAULT_NET_SCH fq

        ### Select LRU config
        echo "Enabling multigenerational LRU..."
        scripts/config -e LRU_GEN \
                -e LRU_GEN_ENABLED \
                -d LRU_GEN_STATS

        echo "Enable THP always..."
        scripts/config -d TRANSPARENT_HUGEPAGE_MADVISE \
                -e TRANSPARENT_HUGEPAGE_ALWAYS

        ### Enable LRNG
        echo "Enabling Linux Random Number Generator ..."
        scripts/config -d RANDOM_DEFAULT_IMPL \
                -e LRNG \
                -e LRNG_SHA256 \
                -e LRNG_COMMON_DEV_IF \
                -e LRNG_DRNG_ATOMIC \
                -e LRNG_SYSCTL \
                -e LRNG_RANDOM_IF \
                -e LRNG_AIS2031_NTG1_SEEDING_STRATEGY \
                -m LRNG_KCAPI_IF \
                -m LRNG_HWRAND_IF \
                -e LRNG_DEV_IF \
                -e LRNG_RUNTIME_ES_CONFIG \
                -e LRNG_IRQ_DFLT_TIMER_ES \
                -d LRNG_SCHED_DFLT_TIMER_ES \
                -e LRNG_TIMER_COMMON \
                -d LRNG_COLLECTION_SIZE_256 \
                -d LRNG_COLLECTION_SIZE_512 \
                -e LRNG_COLLECTION_SIZE_1024 \
                -d LRNG_COLLECTION_SIZE_2048 \
                -d LRNG_COLLECTION_SIZE_4096 \
                -d LRNG_COLLECTION_SIZE_8192 \
                --set-val LRNG_COLLECTION_SIZE 1024 \
                -e LRNG_HEALTH_TESTS \
                --set-val LRNG_RCT_CUTOFF 31 \
                --set-val LRNG_APT_CUTOFF 325 \
                -e LRNG_IRQ \
                -e LRNG_CONTINUOUS_COMPRESSION_ENABLED \
                -d LRNG_CONTINUOUS_COMPRESSION_DISABLED \
                -e LRNG_ENABLE_CONTINUOUS_COMPRESSION \
                -e LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION \
                --set-val LRNG_IRQ_ENTROPY_RATE 256 \
                -e LRNG_JENT \
                --set-val LRNG_JENT_ENTROPY_RATE 16 \
                -e LRNG_CPU \
                --set-val LRNG_CPU_FULL_ENT_MULTIPLIER 1 \
                --set-val LRNG_CPU_ENTROPY_RATE 8 \
                -e LRNG_SCHED \
                --set-val LRNG_SCHED_ENTROPY_RATE 4294967295 \
                -e LRNG_DRNG_CHACHA20 \
                -m LRNG_DRBG \
                -m LRNG_DRNG_KCAPI \
                -e LRNG_SWITCH \
                -e LRNG_SWITCH_HASH \
                -m LRNG_HASH_KCAPI \
                -e LRNG_SWITCH_DRNG \
                -m LRNG_SWITCH_DRBG \
                -m LRNG_SWITCH_DRNG_KCAPI \
                -e LRNG_DFLT_DRNG_CHACHA20 \
                -d LRNG_DFLT_DRNG_DRBG \
                -d LRNG_DFLT_DRNG_KCAPI \
                -e LRNG_TESTING_MENU \
                -d LRNG_RAW_HIRES_ENTROPY \
                -d LRNG_RAW_JIFFIES_ENTROPY \
                -d LRNG_RAW_IRQ_ENTROPY \
                -d LRNG_RAW_RETIP_ENTROPY \
                -d LRNG_RAW_REGS_ENTROPY \
                -d LRNG_RAW_ARRAY \
                -d LRNG_IRQ_PERF \
                -d LRNG_RAW_SCHED_HIRES_ENTROPY \
                -d LRNG_RAW_SCHED_PID_ENTROPY \
                -d LRNG_RAW_SCHED_START_TIME_ENTROPY \
                -d LRNG_RAW_SCHED_NVCSW_ENTROPY \
                -d LRNG_SCHED_PERF \
                -d LRNG_ACVT_HASH \
                -d LRNG_RUNTIME_MAX_WO_RESEED_CONFIG \
                -d LRNG_TEST_CPU_ES_COMPRESSION \
                -e LRNG_SELFTEST \
                -d LRNG_SELFTEST_PANIC \
                -d LRNG_RUNTIME_FORCE_SEEDING_DISABLE

        ### Enable zram/zswap ZSTD compression
        echo "Enabling zram/swap ZSTD compression..."
        scripts/config -d ZRAM_DEF_COMP_LZORLE \
                -e ZRAM_DEF_COMP_ZSTD \
                --set-str ZRAM_DEF_COMP zstd \
                -d ZSWAP_COMPRESSOR_DEFAULT_LZ4 \
                -e ZSWAP_COMPRESSOR_DEFAULT_ZSTD \
                --set-str ZSWAP_COMPRESSOR_DEFAULT zstd

        ### Disable DEBUG
        scripts/config -d DEBUG_INFO \
                -d DEBUG_INFO_BTF \
                -d DEBUG_INFO_DWARF4 \
                -d DEBUG_INFO_DWARF5 \
                -d PAHOLE_HAS_SPLIT_BTF \
                -d DEBUG_INFO_BTF_MODULES \
                -d SLUB_DEBUG \
                -d PM_DEBUG \
                -d PM_ADVANCED_DEBUG \
                -d PM_SLEEP_DEBUG \
                -d ACPI_DEBUG \
                -d SCHED_DEBUG \
                -d LATENCYTOP \
                -d DEBUG_PREEMPT

        # disable CONFIG_DEBUG_INFO=y at build time otherwise memory usage blows up
        # and can easily overwhelm a system with 32 GB of memory using a tmpfs build
        # partition ... this was introduced by FS#66260, see:
        # https://git.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/linux&id=663b08666b269eeeeaafbafaee07fd03389ac8d7
        scripts/config -d CONFIG_CGROUP_BPF
        scripts/config -d CONFIG_BPF_LSM
        scripts/config -d CONFIG_BPF_PRELOAD
        scripts/config -d CONFIG_BPF_LIRC_MODE2
        scripts/config -d CONFIG_BPF_KPROBE_OVERRIDE

        # https://bbs.archlinux.org/viewtopic.php?pid=1824594#p1824594
        scripts/config -e CONFIG_PSI_DEFAULT_DISABLED

        # FS#66613
        # https://bugzilla.kernel.org/show_bug.cgi?id=207173#c6
        scripts/config -d CONFIG_KVM_WERROR
        # https://bbs.archlinux.org/viewtopic.php?pid=1863567#p1863567
        scripts/config -d CONFIG_LATENCYTOP

        echo "Enable USER_NS_UNPRIVILEGED"
        scripts/config -e USER_NS
        #echo "Enable WINE FASTSYNC"
        #scripts/config -e WINESYNC

        scripts/config -e CONFIG_MODULES

        echo $pkgdir/usr/lib/modules/$(<version)

        ### Rewrite configuration
        echo "Rewrite configuration..."
        _make_alt ${BUILD_FLAGS[*]} CFLAGS="-Xclang -load -Xclang LLVMPolly.so" CXXFLAGS="-Xclang -load -Xclang LLVMPolly.so -stdlib=libc++" prepare -j3
        _make_alt ${BUILD_FLAGS[*]} CFLAGS="-Xclang -load -Xclang LLVMPolly.so" CXXFLAGS="-Xclang -load -Xclang LLVMPolly.so -stdlib=libc++" modules_prepare -j3

        cd ${srcdir}/"zfs"
        ./autogen.sh
        sed -i "s|\$(uname -r)|${pkgver}-${pkgsuffix}|g" configure
        ./configure KERNEL_LLVM=1 CFLAGS="-O3 -march=znver2 -mtune=znver2 -Xclang -load -Xclang LLVMPolly.so -mllvm -polly -mllvm -polly-parallel -mllvm -polly-position=early -fopenmp -mllvm -polly-tiling=true -mllvm -polly-prevect-width=256 -mllvm -polly-vectorizer=stripmine -mllvm -polly-omp-backend=LLVM -mllvm -polly-scheduling=dynamic -mllvm -polly-ast-use-context -mllvm -polly-invariant-load-hoisting -mllvm -polly-loopfusion-greedy -mllvm -polly-run-inliner -mllvm -polly-run-dce -mllvm -polly-enable-delicm=true -mllvm -extra-vectorizer-passes -mllvm -enable-cond-stores-vec -mllvm -slp-vectorize-hor-store -mllvm -enable-loopinterchange -mllvm -enable-loop-distribute -mllvm -enable-unroll-and-jam -mllvm -enable-loop-flatten -mllvm -interleave-small-loop-scalar-reduction -mllvm -unroll-runtime-multi-exit -mllvm -aggressive-ext-opt -fno-math-errno -fno-trapping-math -falign-functions=32 -fno-semantic-interposition -mharden-sls=none -fomit-frame-pointer -mprefer-vector-width=256 -std=gnu18" CC=clang LD=ld.lld LDFLAGS="-fuse-ld=mold" --prefix=/usr --sysconfdir=/etc --sbindir=/usr/bin --libdir=/usr/lib \
                --datadir=/usr/share --includedir=/usr/include --with-udevdir=/lib/udev \
                --libexecdir=/usr/lib/zfs --with-config=kernel \
                --enable-linux-builtin \
                --with-linux=${srcdir}/$_srcname
        ./copy-builtin ${srcdir}/${_srcname}

        cd ${srcdir}/${_srcname}
        scripts/config -e CONFIG_ZFS

        yes "" | _make_alt ${BUILD_FLAGS[*]} CFLAGS="-Xclang -load -Xclang LLVMPolly.so" CXXFLAGS="-Xclang -load -Xclang LLVMPolly.so -stdlib=libc++" config >/dev/null
        diff -u ../config .config || :

        ### Prepared version
        echo "Prepared $pkgbase version $(<version)"

        # make ${BUILD_FLAGS[*]} nconfig

        ### Save configuration for later reuse
        echo "Save configuration for later reuse..."
        cat .config >"${startdir}/config-${pkgver}-${pkgrel}${pkgbase#linux}"

}

build() {
        cd ${srcdir}/${_srcname}
        make ${BUILD_FLAGS[*]} all -j3
}

_package() {
        pkgdesc="The $pkgdesc kernel and modules"
        depends=('coreutils' 'kmod' 'initramfs')
        optdepends=('wireless-regdb: to set the correct wireless channels of your country'
                'linux-firmware: firmware images needed for some devices'
                'modprobed-db: Keeps track of EVERY kernel module that has ever been probed - useful for those of us who make localmodconfig'
                'uksmd: Userspace KSM helper daemon')
        provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE KSMBD-MODULE UKSMD-BUILTIN)

        cd ${srcdir}/$_srcname

        local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

        echo "Installing boot image..."
        # systemd expects to find the kernel here to allow hibernation
        # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
        install -Dm644 "$(_make_alt -s image_name)" "$modulesdir/vmlinuz"

        # Used by mkinitcpio to name the kernel
        echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

        echo "Installing modules..."
        _make_alt INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
                DEPMOD=/doesnt/exist modules_install # Suppress depmod

        # remove build and source links
        rm "$modulesdir"/{source,build}
}

_package-headers() {
        pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
        depends=('pahole' linux-${pkgsuffix})

        cd ${srcdir}/${_srcname}
        local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

        echo "Installing build files..."
        install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
                localversion.* version vmlinux
        install -Dt "$builddir/kernel" -m644 kernel/Makefile
        install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
        cp -t "$builddir" -a scripts

        # required when STACK_VALIDATION is enabled
        install -Dt "$builddir/tools/objtool" tools/objtool/objtool

        # required when DEBUG_INFO_BTF_MODULES is enabled
        if [ -f tools/bpf/resolve_btfids/resolve_btfids ]; then
                install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids
        fi

        echo "Installing headers..."
        cp -t "$builddir" -a include
        cp -t "$builddir/arch/x86" -a arch/x86/include
        install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

        install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
        install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

        # https://bugs.archlinux.org/task/13146
        install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

        # https://bugs.archlinux.org/task/20402
        install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
        install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
        install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

        # https://bugs.archlinux.org/task/71392
        install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

        echo "Installing KConfig files..."
        find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

        echo "Removing unneeded architectures..."
        local arch
        for arch in "$builddir"/arch/*/; do
                [[ $arch = */x86/ ]] && continue
                echo "Removing $(basename "$arch")"
                rm -r "$arch"
        done

        echo "Removing documentation..."
        rm -r "$builddir/Documentation"

        echo "Removing broken symlinks..."
        find -L "$builddir" -type l -printf 'Removing %P\n' -delete

        echo "Removing loose objects..."
        find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

        echo "Stripping build tools..."
        local file
        while read -rd '' file; do
                case "$(file -Sib "$file")" in
                application/x-sharedlib\;*) # Libraries (.so)
                        strip -v $STRIP_SHARED "$file" ;;
                application/x-archive\;*) # Libraries (.a)
                        strip -v $STRIP_STATIC "$file" ;;
                application/x-executable\;*) # Binaries
                        strip -v $STRIP_BINARIES "$file" ;;
                application/x-pie-executable\;*) # Relocatable binaries
                        strip -v $STRIP_SHARED "$file" ;;
                esac
        done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

        echo "Stripping vmlinux..."
        strip -v $STRIP_STATIC "$builddir/vmlinux"

        echo "Adding symlink..."
        mkdir -p "$pkgdir/usr/src"
        ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")

for _p in "${pkgname[@]}"; do
        eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
        _package${_p#$pkgbase}
}"
done

b2sums=('74a4f998987780001e924e28f8a3f585cd50da9d87d120bcb33fe1fd4fccccc2301fbc3c84c62e914e4694b5eb138e33cacda515db51d5a3997d114154449be3'
        'c675a334980f437a9d9549f9491cfc1095dafb5606b7149f894398e9c05cc06e8f78ce25d0e462565a0fb31f417dcdb0de15c1f5c8a010c76a5f000d5a662682'
        'fdd890ebb65402a14731e8640976b3525f2b9516c0598300a0f200eb9e21a1e58095c001fd14dfb775e9f1e0211744fa4ae12cddf41158c0297670670ae36e76'
        'c498070ba8343db590bcf8456a19c56565d9f461e2aca60ce47becef5657776339bec7ed1eb0daeeceb80c222f437a3071859cece7b71d2ea0c3947fd3e6a131'
        '46e0c0b326b580af6da240747f1e475cdd5838064452f641b2b0e1595cf3a8ddd7c06520c8ce9609fe18a59593f9981ff0b27b47401705a5f70d6c2496e613cb'
        '84d38cd79a1680bff4f84acd692d948d8ef5e798dca4dd3e14927b0f6c6295956e7ef583daa7749e212037bbb6b5d17eec01be8fd31966549bae0a90cb5d63e5'
        'db78ba180ea95c77f04d3d3dc99d07c35c0e9efcfd2baf997e485b721adefb5684bf62185436353f7faceba1d2271b5c1c430fcad9a441657bfabdf74d36917b'
        '21bd89028133e9a25878e5841808194c1aa742afe0700e669bc5a024091e04b87b23566e96b451bbad235a33d828f5853e75dab0ec677ad9a16c6406c2ced850'
        'f65dacee60028c2944f014db082a308b7b833e3b3a2beb66823ba71a6b22117377aee31c8e77496b341f2008928c318781e0f65ec156998782571c51a0b05580'
        'SKIP'
        '4bca23e34cd74d956e1a15232096d02c4ae384053adab39f6d33fd3c1e1ff3b158e3be242722528e224a08d938d587293e6abd8384ee5f23fb90f72c63ff98b1'
        '0475701c2175f174805cc35473b0bd6c24fd1144e589716ee4be1ad26d7980504555d375d228ffd2ed95c340aa87525a25521fa909c83acd1ba1d572ab4b8cfb'
        'e8bc98241eb7fa60564a677b9cd736b85e1de610608757b4c4c97bd3cdb0bbe897c8e938a86a765976d587d97adc17e0863a8fa3248e1465d6dcb95371aeba13'
        'e5a47fd2664a06a3a598c763018502165d840356ef8ba058e501a33cd05039369e9af6b1469ac195d9238c5da336288cc27fb4c762bcfd98158642ce1619a673'
        '20ddc92f1800af48cc6c8d717120331be9d5046b3523075f19cadea2579919946a29a48a1927de7d906c2e0bb5f96499fecbb8cbf5beae8a980afc4d215aff8f'
        'ab3109803b8efd522592e0ad51b56e2f7ddf15f42816b754cd4401d3583668a108d797d477b0bc8d35f2b665bf0333912bc799e21114e8b247ccaf0ba9ce4789'
        '8d963273edf927d72aeec559252eac8fc848c643909fcf50a279803a091f16105bbf6b053cb49056485f8445353857dc34d076b98113cfd00142ccae640ba8fc'
        '707ff9b04c2214bed43d0a720fef92cad8840666f6752edcc8aba2997d4375fe8d9f6e999660718eb5c3eacb31f601a5c62460da139842ec0921320dbec8a7c2')
